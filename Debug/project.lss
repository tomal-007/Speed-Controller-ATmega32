
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000f94  00001028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006a  00800064  00800064  0000102c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000123d  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b4  00000000  00000000  00002395  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ac  00000000  00000000  00002649  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000022c  00000000  00000000  00002af8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c5  00000000  00000000  00002d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000084e  00000000  00000000  00002fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003837  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 94 02 	jmp	0x528	; 0x528 <__vector_1>
   8:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 ba 02 	jmp	0x574	; 0x574 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3c       	cpi	r26, 0xCE	; 206
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <main>
  8a:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pinChange>:
	pinChange(D3,0);
	
	if(a & 16)
	pinChange(D4,1);
	else
	pinChange(D4,0);
  92:	67 2b       	or	r22, r23
  94:	09 f0       	breq	.+2      	; 0x98 <pinChange+0x6>
  96:	9f c0       	rjmp	.+318    	; 0x1d6 <pinChange+0x144>
  98:	00 97       	sbiw	r24, 0x00	; 0

	if(a & 32)
  9a:	11 f4       	brne	.+4      	; 0xa0 <pinChange+0xe>
  9c:	d8 98       	cbi	0x1b, 0	; 27
	pinChange(D5,1);
  9e:	08 95       	ret
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	91 05       	cpc	r25, r1
  a4:	11 f4       	brne	.+4      	; 0xaa <pinChange+0x18>
  a6:	d9 98       	cbi	0x1b, 1	; 27
  a8:	08 95       	ret
  aa:	82 30       	cpi	r24, 0x02	; 2
	else
	pinChange(D5,0);
  ac:	91 05       	cpc	r25, r1
  ae:	11 f4       	brne	.+4      	; 0xb4 <pinChange+0x22>
  b0:	da 98       	cbi	0x1b, 2	; 27
  b2:	08 95       	ret
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	91 05       	cpc	r25, r1
	
	if(a & 64)
  b8:	11 f4       	brne	.+4      	; 0xbe <pinChange+0x2c>
  ba:	db 98       	cbi	0x1b, 3	; 27
	pinChange(D6,1);
  bc:	08 95       	ret
  be:	84 30       	cpi	r24, 0x04	; 4
  c0:	91 05       	cpc	r25, r1
  c2:	11 f4       	brne	.+4      	; 0xc8 <pinChange+0x36>
  c4:	dc 98       	cbi	0x1b, 4	; 27
  c6:	08 95       	ret
  c8:	85 30       	cpi	r24, 0x05	; 5
	else
	pinChange(D6,0);
  ca:	91 05       	cpc	r25, r1
  cc:	11 f4       	brne	.+4      	; 0xd2 <pinChange+0x40>
  ce:	dd 98       	cbi	0x1b, 5	; 27
  d0:	08 95       	ret
  d2:	86 30       	cpi	r24, 0x06	; 6
  d4:	91 05       	cpc	r25, r1
	
	if(a & 128)
  d6:	11 f4       	brne	.+4      	; 0xdc <pinChange+0x4a>
  d8:	de 98       	cbi	0x1b, 6	; 27
	pinChange(D7,1);
  da:	08 95       	ret
  dc:	87 30       	cpi	r24, 0x07	; 7
  de:	91 05       	cpc	r25, r1
  e0:	11 f4       	brne	.+4      	; 0xe6 <pinChange+0x54>
  e2:	df 98       	cbi	0x1b, 7	; 27
  e4:	08 95       	ret
  e6:	8a 30       	cpi	r24, 0x0A	; 10
	else
	pinChange(D7,0);
  e8:	91 05       	cpc	r25, r1
  ea:	11 f4       	brne	.+4      	; 0xf0 <pinChange+0x5e>
  ec:	c0 98       	cbi	0x18, 0	; 24
  ee:	08 95       	ret
  f0:	8b 30       	cpi	r24, 0x0B	; 11
  f2:	91 05       	cpc	r25, r1
}
  f4:	11 f4       	brne	.+4      	; 0xfa <pinChange+0x68>
  f6:	c1 98       	cbi	0x18, 1	; 24
		else if(a == eS_PORTA7)
		  PORTA &= ~(1<<PA7);
		else if(a == eS_PORTB0)
		  PORTB &= ~(1<<PB0);  
		else if(a == eS_PORTB1)
		  PORTB &= ~(1<<PB1);
  f8:	08 95       	ret
		else if(a == eS_PORTB2)
  fa:	8c 30       	cpi	r24, 0x0C	; 12
  fc:	91 05       	cpc	r25, r1
  fe:	11 f4       	brne	.+4      	; 0x104 <pinChange+0x72>
		  PORTB &= ~(1<<PB2);  
 100:	c2 98       	cbi	0x18, 2	; 24
 102:	08 95       	ret
		else if(a == eS_PORTB3)
 104:	8d 30       	cpi	r24, 0x0D	; 13
 106:	91 05       	cpc	r25, r1
 108:	11 f4       	brne	.+4      	; 0x10e <pinChange+0x7c>
		  PORTB &= ~(1<<PB3);  
 10a:	c3 98       	cbi	0x18, 3	; 24
 10c:	08 95       	ret
		else if(a == eS_PORTB4)
 10e:	8e 30       	cpi	r24, 0x0E	; 14
 110:	91 05       	cpc	r25, r1
 112:	11 f4       	brne	.+4      	; 0x118 <pinChange+0x86>
		  PORTB &= ~(1<<PB4);  
 114:	c4 98       	cbi	0x18, 4	; 24
 116:	08 95       	ret
		else if(a == eS_PORTB5)
 118:	8f 30       	cpi	r24, 0x0F	; 15
 11a:	91 05       	cpc	r25, r1
 11c:	11 f4       	brne	.+4      	; 0x122 <pinChange+0x90>
		  PORTB &= ~(1<<PB5);  
 11e:	c5 98       	cbi	0x18, 5	; 24
 120:	08 95       	ret
		else if(a == eS_PORTB6)
 122:	80 31       	cpi	r24, 0x10	; 16
 124:	91 05       	cpc	r25, r1
 126:	11 f4       	brne	.+4      	; 0x12c <pinChange+0x9a>
		  PORTB &= ~(1<<PB6);  
 128:	c6 98       	cbi	0x18, 6	; 24
 12a:	08 95       	ret
		else if(a == eS_PORTB7)
 12c:	81 31       	cpi	r24, 0x11	; 17
 12e:	91 05       	cpc	r25, r1
 130:	11 f4       	brne	.+4      	; 0x136 <pinChange+0xa4>
		  PORTB &= ~(1<<PB7);
 132:	c7 98       	cbi	0x18, 7	; 24
 134:	08 95       	ret
		else if(a == eS_PORTC0)
 136:	84 31       	cpi	r24, 0x14	; 20
 138:	91 05       	cpc	r25, r1
 13a:	11 f4       	brne	.+4      	; 0x140 <pinChange+0xae>
		  PORTC &= ~(1<<PC0);   
 13c:	a8 98       	cbi	0x15, 0	; 21
 13e:	08 95       	ret
		else if(a == eS_PORTC1)
 140:	85 31       	cpi	r24, 0x15	; 21
 142:	91 05       	cpc	r25, r1
 144:	11 f4       	brne	.+4      	; 0x14a <pinChange+0xb8>
		  PORTC &= ~(1<<PC1); 
 146:	a9 98       	cbi	0x15, 1	; 21
 148:	08 95       	ret
		else if(a == eS_PORTC2)
 14a:	86 31       	cpi	r24, 0x16	; 22
 14c:	91 05       	cpc	r25, r1
 14e:	11 f4       	brne	.+4      	; 0x154 <pinChange+0xc2>
		  PORTC &= ~(1<<PC2);
 150:	aa 98       	cbi	0x15, 2	; 21
 152:	08 95       	ret
		else if(a == eS_PORTC3)
 154:	87 31       	cpi	r24, 0x17	; 23
 156:	91 05       	cpc	r25, r1
 158:	11 f4       	brne	.+4      	; 0x15e <pinChange+0xcc>
		  PORTC &= ~(1<<PC3);   
 15a:	ab 98       	cbi	0x15, 3	; 21
 15c:	08 95       	ret
		else if(a == eS_PORTC4)
 15e:	88 31       	cpi	r24, 0x18	; 24
 160:	91 05       	cpc	r25, r1
 162:	11 f4       	brne	.+4      	; 0x168 <pinChange+0xd6>
		  PORTC &= ~(1<<PC4);  
 164:	ac 98       	cbi	0x15, 4	; 21
 166:	08 95       	ret
		else if(a == eS_PORTC5)
 168:	89 31       	cpi	r24, 0x19	; 25
 16a:	91 05       	cpc	r25, r1
 16c:	11 f4       	brne	.+4      	; 0x172 <pinChange+0xe0>
		  PORTC &= ~(1<<PC5);  
 16e:	ad 98       	cbi	0x15, 5	; 21
 170:	08 95       	ret
        else if(a == eS_PORTC6)
 172:	8a 31       	cpi	r24, 0x1A	; 26
 174:	91 05       	cpc	r25, r1
 176:	11 f4       	brne	.+4      	; 0x17c <pinChange+0xea>
          PORTC &= ~(1<<PC6);		
 178:	ae 98       	cbi	0x15, 6	; 21
 17a:	08 95       	ret
		else if(a == eS_PORTC7)
 17c:	8b 31       	cpi	r24, 0x1B	; 27
 17e:	91 05       	cpc	r25, r1
 180:	11 f4       	brne	.+4      	; 0x186 <pinChange+0xf4>
		  PORTC &= ~(1<<PC7);
 182:	af 98       	cbi	0x15, 7	; 21
 184:	08 95       	ret
		else if(a == eS_PORTD0)
 186:	8e 31       	cpi	r24, 0x1E	; 30
 188:	91 05       	cpc	r25, r1
 18a:	11 f4       	brne	.+4      	; 0x190 <pinChange+0xfe>
		  PORTD &= ~(1<<PD0);
 18c:	90 98       	cbi	0x12, 0	; 18
 18e:	08 95       	ret
		else if(a == eS_PORTD1)
 190:	8f 31       	cpi	r24, 0x1F	; 31
 192:	91 05       	cpc	r25, r1
 194:	11 f4       	brne	.+4      	; 0x19a <pinChange+0x108>
		  PORTD &= ~(1<<PD1);  
 196:	91 98       	cbi	0x12, 1	; 18
 198:	08 95       	ret
		else if(a == eS_PORTD2)
 19a:	80 32       	cpi	r24, 0x20	; 32
 19c:	91 05       	cpc	r25, r1
 19e:	11 f4       	brne	.+4      	; 0x1a4 <pinChange+0x112>
		  PORTD &= ~(1<<PD2);
 1a0:	92 98       	cbi	0x12, 2	; 18
 1a2:	08 95       	ret
		else if(a == eS_PORTD3)
 1a4:	81 32       	cpi	r24, 0x21	; 33
 1a6:	91 05       	cpc	r25, r1
 1a8:	11 f4       	brne	.+4      	; 0x1ae <pinChange+0x11c>
		  PORTD &= ~(1<<PD3);
 1aa:	93 98       	cbi	0x12, 3	; 18
 1ac:	08 95       	ret
		else if(a == eS_PORTD4)
 1ae:	82 32       	cpi	r24, 0x22	; 34
 1b0:	91 05       	cpc	r25, r1
 1b2:	11 f4       	brne	.+4      	; 0x1b8 <pinChange+0x126>
		  PORTD &= ~(1<<PD4);
 1b4:	94 98       	cbi	0x12, 4	; 18
 1b6:	08 95       	ret
		else if(a == eS_PORTD5)
 1b8:	83 32       	cpi	r24, 0x23	; 35
 1ba:	91 05       	cpc	r25, r1
 1bc:	11 f4       	brne	.+4      	; 0x1c2 <pinChange+0x130>
		  PORTD &= ~(1<<PD5);
 1be:	95 98       	cbi	0x12, 5	; 18
 1c0:	08 95       	ret
		else if(a == eS_PORTD6)
 1c2:	84 32       	cpi	r24, 0x24	; 36
 1c4:	91 05       	cpc	r25, r1
 1c6:	11 f4       	brne	.+4      	; 0x1cc <pinChange+0x13a>
		  PORTD &= ~(1<<PD6);   
 1c8:	96 98       	cbi	0x12, 6	; 18
 1ca:	08 95       	ret
		else if(a == eS_PORTD7)
 1cc:	85 97       	sbiw	r24, 0x25	; 37
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <pinChange+0x140>
 1d0:	9f c0       	rjmp	.+318    	; 0x310 <pinChange+0x27e>
		  PORTD &= ~(1<<PD7);           
 1d2:	97 98       	cbi	0x12, 7	; 18
 1d4:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	11 f4       	brne	.+4      	; 0x1de <pinChange+0x14c>
		  PORTA |= (1<<PA0);
 1da:	d8 9a       	sbi	0x1b, 0	; 27
 1dc:	08 95       	ret
		else if(a == eS_PORTA1)
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	91 05       	cpc	r25, r1
 1e2:	11 f4       	brne	.+4      	; 0x1e8 <pinChange+0x156>
		  PORTA |= (1<<PA1);
 1e4:	d9 9a       	sbi	0x1b, 1	; 27
 1e6:	08 95       	ret
		else if(a == eS_PORTA2)
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	91 05       	cpc	r25, r1
 1ec:	11 f4       	brne	.+4      	; 0x1f2 <pinChange+0x160>
		  PORTA |= (1<<PA2);
 1ee:	da 9a       	sbi	0x1b, 2	; 27
 1f0:	08 95       	ret
		else if(a == eS_PORTA3)
 1f2:	83 30       	cpi	r24, 0x03	; 3
 1f4:	91 05       	cpc	r25, r1
 1f6:	11 f4       	brne	.+4      	; 0x1fc <pinChange+0x16a>
		  PORTA |= (1<<PA3);
 1f8:	db 9a       	sbi	0x1b, 3	; 27
 1fa:	08 95       	ret
		else if(a == eS_PORTA4)
 1fc:	84 30       	cpi	r24, 0x04	; 4
 1fe:	91 05       	cpc	r25, r1
 200:	11 f4       	brne	.+4      	; 0x206 <pinChange+0x174>
		  PORTA |= (1<<PA4);
 202:	dc 9a       	sbi	0x1b, 4	; 27
 204:	08 95       	ret
		else if(a == eS_PORTA5)
 206:	85 30       	cpi	r24, 0x05	; 5
 208:	91 05       	cpc	r25, r1
 20a:	11 f4       	brne	.+4      	; 0x210 <pinChange+0x17e>
		  PORTA |= (1<<PA5);
 20c:	dd 9a       	sbi	0x1b, 5	; 27
 20e:	08 95       	ret
		else if(a == eS_PORTA6)
 210:	86 30       	cpi	r24, 0x06	; 6
 212:	91 05       	cpc	r25, r1
 214:	11 f4       	brne	.+4      	; 0x21a <pinChange+0x188>
		  PORTA |= (1<<PA6);
 216:	de 9a       	sbi	0x1b, 6	; 27
 218:	08 95       	ret
		else if(a == eS_PORTA7)
 21a:	87 30       	cpi	r24, 0x07	; 7
 21c:	91 05       	cpc	r25, r1
 21e:	11 f4       	brne	.+4      	; 0x224 <pinChange+0x192>
		  PORTA |= (1<<PA7);
 220:	df 9a       	sbi	0x1b, 7	; 27
 222:	08 95       	ret
		else if(a == eS_PORTB0)
 224:	8a 30       	cpi	r24, 0x0A	; 10
 226:	91 05       	cpc	r25, r1
 228:	11 f4       	brne	.+4      	; 0x22e <pinChange+0x19c>
	  	  PORTB |= (1<<PB0);
 22a:	c0 9a       	sbi	0x18, 0	; 24
 22c:	08 95       	ret
		else if(a == eS_PORTB1)
 22e:	8b 30       	cpi	r24, 0x0B	; 11
 230:	91 05       	cpc	r25, r1
 232:	11 f4       	brne	.+4      	; 0x238 <pinChange+0x1a6>
		  PORTB |= (1<<PB1);
 234:	c1 9a       	sbi	0x18, 1	; 24
 236:	08 95       	ret
		else if(a == eS_PORTB2)
 238:	8c 30       	cpi	r24, 0x0C	; 12
 23a:	91 05       	cpc	r25, r1
 23c:	11 f4       	brne	.+4      	; 0x242 <pinChange+0x1b0>
		  PORTB |= (1<<PB2);
 23e:	c2 9a       	sbi	0x18, 2	; 24
 240:	08 95       	ret
		else if(a == eS_PORTB3)
 242:	8d 30       	cpi	r24, 0x0D	; 13
 244:	91 05       	cpc	r25, r1
 246:	11 f4       	brne	.+4      	; 0x24c <pinChange+0x1ba>
		  PORTB |= (1<<PB3);
 248:	c3 9a       	sbi	0x18, 3	; 24
 24a:	08 95       	ret
		else if(a == eS_PORTB4)
 24c:	8e 30       	cpi	r24, 0x0E	; 14
 24e:	91 05       	cpc	r25, r1
 250:	11 f4       	brne	.+4      	; 0x256 <pinChange+0x1c4>
		  PORTB |= (1<<PB4);
 252:	c4 9a       	sbi	0x18, 4	; 24
 254:	08 95       	ret
		else if(a == eS_PORTB5)
 256:	8f 30       	cpi	r24, 0x0F	; 15
 258:	91 05       	cpc	r25, r1
 25a:	11 f4       	brne	.+4      	; 0x260 <pinChange+0x1ce>
		  PORTB |= (1<<PB5);
 25c:	c5 9a       	sbi	0x18, 5	; 24
 25e:	08 95       	ret
		else if(a == eS_PORTB6)
 260:	80 31       	cpi	r24, 0x10	; 16
 262:	91 05       	cpc	r25, r1
 264:	11 f4       	brne	.+4      	; 0x26a <pinChange+0x1d8>
		  PORTB |= (1<<PB6);
 266:	c6 9a       	sbi	0x18, 6	; 24
 268:	08 95       	ret
		else if(a == eS_PORTB7)
 26a:	81 31       	cpi	r24, 0x11	; 17
 26c:	91 05       	cpc	r25, r1
 26e:	11 f4       	brne	.+4      	; 0x274 <pinChange+0x1e2>
		  PORTB |= (1<<PB7);
 270:	c7 9a       	sbi	0x18, 7	; 24
 272:	08 95       	ret
		else if(a == eS_PORTC0)
 274:	84 31       	cpi	r24, 0x14	; 20
 276:	91 05       	cpc	r25, r1
 278:	11 f4       	brne	.+4      	; 0x27e <pinChange+0x1ec>
		  PORTC |= (1<<PC0);
 27a:	a8 9a       	sbi	0x15, 0	; 21
 27c:	08 95       	ret
		else if(a == eS_PORTC1)
 27e:	85 31       	cpi	r24, 0x15	; 21
 280:	91 05       	cpc	r25, r1
 282:	11 f4       	brne	.+4      	; 0x288 <pinChange+0x1f6>
		  PORTC |= (1<<PC1);
 284:	a9 9a       	sbi	0x15, 1	; 21
 286:	08 95       	ret
		else if(a == eS_PORTC2)
 288:	86 31       	cpi	r24, 0x16	; 22
 28a:	91 05       	cpc	r25, r1
 28c:	11 f4       	brne	.+4      	; 0x292 <pinChange+0x200>
	  	  PORTC |= (1<<PC2);
 28e:	aa 9a       	sbi	0x15, 2	; 21
 290:	08 95       	ret
		else if(a == eS_PORTC3)
 292:	87 31       	cpi	r24, 0x17	; 23
 294:	91 05       	cpc	r25, r1
 296:	11 f4       	brne	.+4      	; 0x29c <pinChange+0x20a>
		  PORTC |= (1<<PC3);
 298:	ab 9a       	sbi	0x15, 3	; 21
 29a:	08 95       	ret
		else if(a == eS_PORTC4)
 29c:	88 31       	cpi	r24, 0x18	; 24
 29e:	91 05       	cpc	r25, r1
 2a0:	11 f4       	brne	.+4      	; 0x2a6 <pinChange+0x214>
		  PORTC |= (1<<PC4);
 2a2:	ac 9a       	sbi	0x15, 4	; 21
 2a4:	08 95       	ret
		else if(a == eS_PORTC5)
 2a6:	89 31       	cpi	r24, 0x19	; 25
 2a8:	91 05       	cpc	r25, r1
 2aa:	11 f4       	brne	.+4      	; 0x2b0 <pinChange+0x21e>
		  PORTC |= (1<<PC5);
 2ac:	ad 9a       	sbi	0x15, 5	; 21
 2ae:	08 95       	ret
		else if(a == eS_PORTC6)
 2b0:	8a 31       	cpi	r24, 0x1A	; 26
 2b2:	91 05       	cpc	r25, r1
 2b4:	11 f4       	brne	.+4      	; 0x2ba <pinChange+0x228>
		  PORTC |= (1<<PC6);  
 2b6:	ae 9a       	sbi	0x15, 6	; 21
 2b8:	08 95       	ret
		else if(a == eS_PORTC7)
 2ba:	8b 31       	cpi	r24, 0x1B	; 27
 2bc:	91 05       	cpc	r25, r1
 2be:	11 f4       	brne	.+4      	; 0x2c4 <pinChange+0x232>
		  PORTC |= (1<<PC7);
 2c0:	af 9a       	sbi	0x15, 7	; 21
 2c2:	08 95       	ret
		else if(a == eS_PORTD0)
 2c4:	8e 31       	cpi	r24, 0x1E	; 30
 2c6:	91 05       	cpc	r25, r1
 2c8:	11 f4       	brne	.+4      	; 0x2ce <pinChange+0x23c>
		  PORTD |= (1<<PD0);
 2ca:	90 9a       	sbi	0x12, 0	; 18
 2cc:	08 95       	ret
		else if(a == eS_PORTD1)
 2ce:	8f 31       	cpi	r24, 0x1F	; 31
 2d0:	91 05       	cpc	r25, r1
 2d2:	11 f4       	brne	.+4      	; 0x2d8 <pinChange+0x246>
		  PORTD |= (1<<PD1);
 2d4:	91 9a       	sbi	0x12, 1	; 18
 2d6:	08 95       	ret
		else if(a == eS_PORTD2)
 2d8:	80 32       	cpi	r24, 0x20	; 32
 2da:	91 05       	cpc	r25, r1
 2dc:	11 f4       	brne	.+4      	; 0x2e2 <pinChange+0x250>
		  PORTD |= (1<<PD2);
 2de:	92 9a       	sbi	0x12, 2	; 18
 2e0:	08 95       	ret
		else if(a == eS_PORTD3)
 2e2:	81 32       	cpi	r24, 0x21	; 33
 2e4:	91 05       	cpc	r25, r1
 2e6:	11 f4       	brne	.+4      	; 0x2ec <pinChange+0x25a>
		  PORTD |= (1<<PD3);
 2e8:	93 9a       	sbi	0x12, 3	; 18
 2ea:	08 95       	ret
		else if(a == eS_PORTD4)
 2ec:	82 32       	cpi	r24, 0x22	; 34
 2ee:	91 05       	cpc	r25, r1
 2f0:	11 f4       	brne	.+4      	; 0x2f6 <pinChange+0x264>
		  PORTD |= (1<<PD4);
 2f2:	94 9a       	sbi	0x12, 4	; 18
 2f4:	08 95       	ret
		else if(a == eS_PORTD5)
 2f6:	83 32       	cpi	r24, 0x23	; 35
 2f8:	91 05       	cpc	r25, r1
 2fa:	11 f4       	brne	.+4      	; 0x300 <pinChange+0x26e>
		  PORTD |= (1<<PD5);
 2fc:	95 9a       	sbi	0x12, 5	; 18
 2fe:	08 95       	ret
		else if(a == eS_PORTD6)
 300:	84 32       	cpi	r24, 0x24	; 36
 302:	91 05       	cpc	r25, r1
 304:	11 f4       	brne	.+4      	; 0x30a <pinChange+0x278>
		  PORTD |= (1<<PD6);
 306:	96 9a       	sbi	0x12, 6	; 18
 308:	08 95       	ret
		else if(a == eS_PORTD7)
 30a:	85 97       	sbiw	r24, 0x25	; 37
 30c:	09 f4       	brne	.+2      	; 0x310 <pinChange+0x27e>
		  PORTD |= (1<<PD7);
 30e:	97 9a       	sbi	0x12, 7	; 18
 310:	08 95       	ret

00000312 <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
 312:	cf 93       	push	r28
 314:	c8 2f       	mov	r28, r24
	if(a & 1)
 316:	80 ff       	sbrs	r24, 0
 318:	07 c0       	rjmp	.+14     	; 0x328 <Lcd4_Port+0x16>
	pinChange(D4,1);
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	70 e0       	ldi	r23, 0x00	; 0
 31e:	82 e2       	ldi	r24, 0x22	; 34
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 326:	06 c0       	rjmp	.+12     	; 0x334 <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	82 e2       	ldi	r24, 0x22	; 34
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 2)
 334:	c1 ff       	sbrs	r28, 1
 336:	07 c0       	rjmp	.+14     	; 0x346 <Lcd4_Port+0x34>
	pinChange(D5,1);
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	83 e2       	ldi	r24, 0x23	; 35
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 344:	06 c0       	rjmp	.+12     	; 0x352 <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	83 e2       	ldi	r24, 0x23	; 35
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 4)
 352:	c2 ff       	sbrs	r28, 2
 354:	07 c0       	rjmp	.+14     	; 0x364 <Lcd4_Port+0x52>
	pinChange(D6,1);
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	84 e2       	ldi	r24, 0x24	; 36
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 362:	06 c0       	rjmp	.+12     	; 0x370 <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	84 e2       	ldi	r24, 0x24	; 36
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	
	if(a & 8)
 370:	c3 ff       	sbrs	r28, 3
 372:	07 c0       	rjmp	.+14     	; 0x382 <Lcd4_Port+0x70>
	pinChange(D7,1);
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	85 e2       	ldi	r24, 0x25	; 37
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 380:	06 c0       	rjmp	.+12     	; 0x38e <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	85 e2       	ldi	r24, 0x25	; 37
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
}
 38e:	cf 91       	pop	r28
 390:	08 95       	ret

00000392 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
 392:	cf 93       	push	r28
 394:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	8a e1       	ldi	r24, 0x1A	; 26
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd4_Port(a);
 3a2:	8c 2f       	mov	r24, r28
 3a4:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	8b e1       	ldi	r24, 0x1B	; 27
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b4:	8f e9       	ldi	r24, 0x9F	; 159
 3b6:	9f e0       	ldi	r25, 0x0F	; 15
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <Lcd4_Cmd+0x26>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <Lcd4_Cmd+0x2c>
 3be:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	8b e1       	ldi	r24, 0x1B	; 27
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 3cc:	8f e9       	ldi	r24, 0x9F	; 159
 3ce:	9f e0       	ldi	r25, 0x0F	; 15
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <Lcd4_Cmd+0x3e>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <Lcd4_Cmd+0x44>
 3d6:	00 00       	nop
	_delay_ms(1);
}
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <Lcd4_Set_Cursor>:
	Lcd4_Cmd(0);
	Lcd4_Cmd(1);
}

void Lcd4_Set_Cursor(char a, char b)
{
 3dc:	cf 93       	push	r28
 3de:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 1)
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	59 f4       	brne	.+22     	; 0x3fa <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
 3e4:	80 e8       	ldi	r24, 0x80	; 128
 3e6:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
 3e8:	82 95       	swap	r24
 3ea:	8f 70       	andi	r24, 0x0F	; 15
 3ec:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
		Lcd4_Cmd(y);
 3f0:	8c 2f       	mov	r24, r28
 3f2:	8f 70       	andi	r24, 0x0F	; 15
 3f4:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 3f8:	0c c0       	rjmp	.+24     	; 0x412 <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 2)
 3fa:	82 30       	cpi	r24, 0x02	; 2
 3fc:	51 f4       	brne	.+20     	; 0x412 <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
 3fe:	80 ec       	ldi	r24, 0xC0	; 192
 400:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
 402:	82 95       	swap	r24
 404:	8f 70       	andi	r24, 0x0F	; 15
 406:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
		Lcd4_Cmd(y);
 40a:	8c 2f       	mov	r24, r28
 40c:	8f 70       	andi	r24, 0x0F	; 15
 40e:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	}
}
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
 41c:	2f ef       	ldi	r18, 0xFF	; 255
 41e:	89 ef       	ldi	r24, 0xF9	; 249
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	21 50       	subi	r18, 0x01	; 1
 424:	80 40       	sbci	r24, 0x00	; 0
 426:	90 40       	sbci	r25, 0x00	; 0
 428:	e1 f7       	brne	.-8      	; 0x422 <Lcd4_Init+0xc>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <Lcd4_Init+0x16>
 42c:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
 42e:	83 e0       	ldi	r24, 0x03	; 3
 430:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 434:	8f e1       	ldi	r24, 0x1F	; 31
 436:	9e e4       	ldi	r25, 0x4E	; 78
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <Lcd4_Init+0x22>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <Lcd4_Init+0x28>
 43e:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
 440:	83 e0       	ldi	r24, 0x03	; 3
 442:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 446:	8f ed       	ldi	r24, 0xDF	; 223
 448:	9b ea       	ldi	r25, 0xAB	; 171
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <Lcd4_Init+0x34>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <Lcd4_Init+0x3a>
 450:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
 452:	83 e0       	ldi	r24, 0x03	; 3
 454:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 464:	88 e0       	ldi	r24, 0x08	; 8
 466:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 470:	8c e0       	ldi	r24, 0x0C	; 12
 472:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
 47c:	86 e0       	ldi	r24, 0x06	; 6
 47e:	0e 94 c9 01 	call	0x392	; 0x392 <Lcd4_Cmd>
 482:	08 95       	ret

00000484 <Lcd4_Write_Char>:
}

void Lcd4_Write_Char(char a)
{
 484:	cf 93       	push	r28
 486:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	8a e1       	ldi	r24, 0x1A	; 26
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
 494:	8c 2f       	mov	r24, r28
 496:	82 95       	swap	r24
 498:	8f 70       	andi	r24, 0x0F	; 15
 49a:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
	pinChange(EN,1);
 49e:	61 e0       	ldi	r22, 0x01	; 1
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	8b e1       	ldi	r24, 0x1B	; 27
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4aa:	8f e9       	ldi	r24, 0x9F	; 159
 4ac:	9f e0       	ldi	r25, 0x0F	; 15
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <Lcd4_Write_Char+0x2a>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <Lcd4_Write_Char+0x30>
 4b4:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	8b e1       	ldi	r24, 0x1B	; 27
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4c2:	8f e9       	ldi	r24, 0x9F	; 159
 4c4:	9f e0       	ldi	r25, 0x0F	; 15
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <Lcd4_Write_Char+0x42>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <Lcd4_Write_Char+0x48>
 4cc:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
 4ce:	8c 2f       	mov	r24, r28
 4d0:	8f 70       	andi	r24, 0x0F	; 15
 4d2:	0e 94 89 01 	call	0x312	; 0x312 <Lcd4_Port>
	pinChange(EN,1);
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	8b e1       	ldi	r24, 0x1B	; 27
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4e2:	8f e9       	ldi	r24, 0x9F	; 159
 4e4:	9f e0       	ldi	r25, 0x0F	; 15
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <Lcd4_Write_Char+0x62>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <Lcd4_Write_Char+0x68>
 4ec:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	8b e1       	ldi	r24, 0x1B	; 27
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 49 00 	call	0x92	; 0x92 <pinChange>
 4fa:	8f e9       	ldi	r24, 0x9F	; 159
 4fc:	9f e0       	ldi	r25, 0x0F	; 15
 4fe:	01 97       	sbiw	r24, 0x01	; 1
 500:	f1 f7       	brne	.-4      	; 0x4fe <Lcd4_Write_Char+0x7a>
 502:	00 c0       	rjmp	.+0      	; 0x504 <Lcd4_Write_Char+0x80>
 504:	00 00       	nop
	_delay_ms(1);
}
 506:	cf 91       	pop	r28
 508:	08 95       	ret

0000050a <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
 50a:	cf 93       	push	r28
 50c:	df 93       	push	r29
 50e:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
 510:	88 81       	ld	r24, Y
 512:	88 23       	and	r24, r24
 514:	31 f0       	breq	.+12     	; 0x522 <Lcd4_Write_String+0x18>
 516:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
 518:	0e 94 42 02 	call	0x484	; 0x484 <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 51c:	89 91       	ld	r24, Y+
 51e:	81 11       	cpse	r24, r1
 520:	fb cf       	rjmp	.-10     	; 0x518 <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	08 95       	ret

00000528 <__vector_1>:

volatile int rps=0;   //Revolution per second
char str[100];

ISR(INT0_vect)//STEP2
{
 528:	1f 92       	push	r1
 52a:	0f 92       	push	r0
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	0f 92       	push	r0
 530:	11 24       	eor	r1, r1
 532:	8f 93       	push	r24
 534:	9f 93       	push	r25
	//PORTB = ~PORTB;
	count++;
 536:	80 91 68 00 	lds	r24, 0x0068
 53a:	90 91 69 00 	lds	r25, 0x0069
 53e:	01 96       	adiw	r24, 0x01	; 1
 540:	90 93 69 00 	sts	0x0069, r25
 544:	80 93 68 00 	sts	0x0068, r24
}
 548:	9f 91       	pop	r25
 54a:	8f 91       	pop	r24
 54c:	0f 90       	pop	r0
 54e:	0f be       	out	0x3f, r0	; 63
 550:	0f 90       	pop	r0
 552:	1f 90       	pop	r1
 554:	18 95       	reti

00000556 <__vector_2>:

ISR(INT1_vect)//STEP2
{
 556:	1f 92       	push	r1
 558:	0f 92       	push	r0
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	0f 92       	push	r0
 55e:	11 24       	eor	r1, r1
 560:	8f 93       	push	r24
	//PORTB = ~PORTB;
	OCR0-=60;
 562:	8c b7       	in	r24, 0x3c	; 60
 564:	8c 53       	subi	r24, 0x3C	; 60
 566:	8c bf       	out	0x3c, r24	; 60
}
 568:	8f 91       	pop	r24
 56a:	0f 90       	pop	r0
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	0f 90       	pop	r0
 570:	1f 90       	pop	r1
 572:	18 95       	reti

00000574 <__vector_7>:

ISR(TIMER1_COMPA_vect) { // this function is called every time the timer reaches the threshold we set
 574:	1f 92       	push	r1
 576:	0f 92       	push	r0
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	0f 92       	push	r0
 57c:	11 24       	eor	r1, r1
 57e:	2f 93       	push	r18
 580:	3f 93       	push	r19
 582:	4f 93       	push	r20
 584:	8f 93       	push	r24
 586:	9f 93       	push	r25

	//PORTB=~PORTB; // toggle the LED
	rps=count;
 588:	80 91 68 00 	lds	r24, 0x0068
 58c:	90 91 69 00 	lds	r25, 0x0069
 590:	90 93 65 00 	sts	0x0065, r25
 594:	80 93 64 00 	sts	0x0064, r24
	rpm=rps*60;
 598:	20 91 64 00 	lds	r18, 0x0064
 59c:	30 91 65 00 	lds	r19, 0x0065
 5a0:	4c e3       	ldi	r20, 0x3C	; 60
 5a2:	42 9f       	mul	r20, r18
 5a4:	c0 01       	movw	r24, r0
 5a6:	43 9f       	mul	r20, r19
 5a8:	90 0d       	add	r25, r0
 5aa:	11 24       	eor	r1, r1
 5ac:	90 93 67 00 	sts	0x0067, r25
 5b0:	80 93 66 00 	sts	0x0066, r24
	count=0;
 5b4:	10 92 69 00 	sts	0x0069, r1
 5b8:	10 92 68 00 	sts	0x0068, r1
}
 5bc:	9f 91       	pop	r25
 5be:	8f 91       	pop	r24
 5c0:	4f 91       	pop	r20
 5c2:	3f 91       	pop	r19
 5c4:	2f 91       	pop	r18
 5c6:	0f 90       	pop	r0
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	0f 90       	pop	r0
 5cc:	1f 90       	pop	r1
 5ce:	18 95       	reti

000005d0 <main>:

int main(void)
{
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
 5d4:	cd b7       	in	r28, 0x3d	; 61
 5d6:	de b7       	in	r29, 0x3e	; 62
 5d8:	c4 56       	subi	r28, 0x64	; 100
 5da:	d1 09       	sbc	r29, r1
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	f8 94       	cli
 5e0:	de bf       	out	0x3e, r29	; 62
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	cd bf       	out	0x3d, r28	; 61
	int i,steps,a,b,intres;
	
	float result;
	
	DDRD=0xF0;
 5e6:	80 ef       	ldi	r24, 0xF0	; 240
 5e8:	81 bb       	out	0x11, r24	; 17
	DDRC=0xFF;
 5ea:	8f ef       	ldi	r24, 0xFF	; 255
 5ec:	84 bb       	out	0x14, r24	; 20
	DDRB=0xFF;
 5ee:	87 bb       	out	0x17, r24	; 23
	Lcd4_Init();
 5f0:	0e 94 0b 02 	call	0x416	; 0x416 <Lcd4_Init>
	
	ADMUX=0b01000000;
 5f4:	80 e4       	ldi	r24, 0x40	; 64
 5f6:	87 b9       	out	0x07, r24	; 7
	ADCSRA=0b10001010;
 5f8:	8a e8       	ldi	r24, 0x8A	; 138
 5fa:	86 b9       	out	0x06, r24	; 6
	
	PORTB = 0b00000000;
 5fc:	18 ba       	out	0x18, r1	; 24
	PORTC=0b00000010;
 5fe:	82 e0       	ldi	r24, 0x02	; 2
 600:	85 bb       	out	0x15, r24	; 21
	TCCR1B|=((1<<WGM12)|(1<<CS12)|(1<<CS10));
 602:	8e b5       	in	r24, 0x2e	; 46
 604:	8d 60       	ori	r24, 0x0D	; 13
 606:	8e bd       	out	0x2e, r24	; 46
	TCCR0=0b01110010;
 608:	82 e7       	ldi	r24, 0x72	; 114
 60a:	83 bf       	out	0x33, r24	; 51

	TIMSK |= (1 << OCIE1A); // enable the CTC interrupt
 60c:	89 b7       	in	r24, 0x39	; 57
 60e:	80 61       	ori	r24, 0x10	; 16
 610:	89 bf       	out	0x39, r24	; 57

	OCR1A   = 961; // set the CTC compare value
 612:	81 ec       	ldi	r24, 0xC1	; 193
 614:	93 e0       	ldi	r25, 0x03	; 3
 616:	9b bd       	out	0x2b, r25	; 43
 618:	8a bd       	out	0x2a, r24	; 42
    OCR0= 230;
 61a:	86 ee       	ldi	r24, 0xE6	; 230
 61c:	8c bf       	out	0x3c, r24	; 60
	//GICR = (1<<INT0); //STEP3
	GICR = (1<<INT1) | (1<<INT0);
 61e:	80 ec       	ldi	r24, 0xC0	; 192
 620:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 0b11111110;//STEP4
 622:	8e ef       	ldi	r24, 0xFE	; 254
 624:	85 bf       	out	0x35, r24	; 53
	sei();
 626:	78 94       	sei
    while(1)
    {
        //TODO:: Please write your application code 
		int ll;
		ADMUX=0b01000000;
		ADCSRA=0b10000010;
 628:	0f 2e       	mov	r0, r31
 62a:	f2 e8       	ldi	r31, 0x82	; 130
 62c:	3f 2e       	mov	r3, r31
 62e:	f0 2d       	mov	r31, r0
		ADCH = 0;
		ADCL = 0;
		
		result=((float)steps*500)/1024;
		
		intres = (int) result;
 630:	68 94       	set
 632:	22 24       	eor	r2, r2
 634:	21 f8       	bld	r2, 1
 636:	41 2c       	mov	r4, r1
		for(i=3;i>=0;i--){
			if(i==1){
				str[i]='.';
				continue;
			}
			str[i]=(intres%10)+48;
 638:	0a e0       	ldi	r16, 0x0A	; 10
 63a:	10 e0       	ldi	r17, 0x00	; 0
		
		intres = (int) result;
		
		for(i=3;i>=0;i--){
			if(i==1){
				str[i]='.';
 63c:	0f 2e       	mov	r0, r31
 63e:	fb e6       	ldi	r31, 0x6B	; 107
 640:	af 2e       	mov	r10, r31
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	bf 2e       	mov	r11, r31
 646:	f0 2d       	mov	r31, r0
 648:	0f 2e       	mov	r0, r31
 64a:	fe e2       	ldi	r31, 0x2E	; 46
 64c:	5f 2e       	mov	r5, r31
 64e:	f0 2d       	mov	r31, r0
		}
		
		
		//Lcd4_Clear();
		if(rpm>0) PORTB=0b00000001;
		else PORTB=0b00000010;
 650:	68 94       	set
 652:	66 24       	eor	r6, r6
 654:	61 f8       	bld	r6, 1
			intres=intres/10;
		}
		
		
		//Lcd4_Clear();
		if(rpm>0) PORTB=0b00000001;
 656:	77 24       	eor	r7, r7
 658:	73 94       	inc	r7
		else PORTB=0b00000010;
		Lcd4_Set_Cursor(1,1);
		Lcd4_Write_String(str);
		char str2[100];
		sprintf(str2,"%d", rpm);
 65a:	0f 2e       	mov	r0, r31
 65c:	f0 e6       	ldi	r31, 0x60	; 96
 65e:	cf 2e       	mov	r12, r31
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	df 2e       	mov	r13, r31
 664:	f0 2d       	mov	r31, r0
 666:	ce 01       	movw	r24, r28
 668:	01 96       	adiw	r24, 0x01	; 1
 66a:	7c 01       	movw	r14, r24
	sei();
    while(1)
    {
        //TODO:: Please write your application code 
		int ll;
		ADMUX=0b01000000;
 66c:	90 e4       	ldi	r25, 0x40	; 64
 66e:	97 b9       	out	0x07, r25	; 7
		ADCSRA=0b10000010;
 670:	36 b8       	out	0x06, r3	; 6
		
		ADCSRA |= (1<<ADSC);
 672:	36 9a       	sbi	0x06, 6	; 6
		
		while (ADCSRA & (1<<ADSC));
 674:	36 99       	sbic	0x06, 6	; 6
 676:	fe cf       	rjmp	.-4      	; 0x674 <main+0xa4>

		ll =ADCL;
 678:	64 b1       	in	r22, 0x04	; 4
		steps=(ADCH & 3)<<8 | ll ;
 67a:	85 b1       	in	r24, 0x05	; 5
		ADCH = 0;
 67c:	15 b8       	out	0x05, r1	; 5
		ADCL = 0;
 67e:	14 b8       	out	0x04, r1	; 4
		ADCSRA |= (1<<ADSC);
		
		while (ADCSRA & (1<<ADSC));

		ll =ADCL;
		steps=(ADCH & 3)<<8 | ll ;
 680:	83 70       	andi	r24, 0x03	; 3
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	78 2b       	or	r23, r24
		ADCH = 0;
		ADCL = 0;
		
		result=((float)steps*500)/1024;
 686:	88 27       	eor	r24, r24
 688:	77 fd       	sbrc	r23, 7
 68a:	80 95       	com	r24
 68c:	98 2f       	mov	r25, r24
 68e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <__floatsisf>
 692:	20 e0       	ldi	r18, 0x00	; 0
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	4a ef       	ldi	r20, 0xFA	; 250
 698:	53 e4       	ldi	r21, 0x43	; 67
 69a:	0e 94 44 04 	call	0x888	; 0x888 <__mulsf3>
 69e:	20 e0       	ldi	r18, 0x00	; 0
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	40 e8       	ldi	r20, 0x80	; 128
 6a4:	5a e3       	ldi	r21, 0x3A	; 58
 6a6:	0e 94 44 04 	call	0x888	; 0x888 <__mulsf3>
		
		intres = (int) result;
 6aa:	0e 94 ad 03 	call	0x75a	; 0x75a <__fixsfsi>
 6ae:	fb 01       	movw	r30, r22
 6b0:	22 2d       	mov	r18, r2
 6b2:	34 2d       	mov	r19, r4
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <main+0xea>
 6b6:	21 50       	subi	r18, 0x01	; 1
 6b8:	31 09       	sbc	r19, r1
		
		for(i=3;i>=0;i--){
			if(i==1){
 6ba:	21 15       	cp	r18, r1
 6bc:	31 05       	cpc	r19, r1
 6be:	19 f4       	brne	.+6      	; 0x6c6 <main+0xf6>
				str[i]='.';
 6c0:	d5 01       	movw	r26, r10
 6c2:	5c 92       	st	X, r5
 6c4:	f8 cf       	rjmp	.-16     	; 0x6b6 <main+0xe6>
 6c6:	c9 01       	movw	r24, r18
 6c8:	86 59       	subi	r24, 0x96	; 150
 6ca:	9f 4f       	sbci	r25, 0xFF	; 255
 6cc:	4c 01       	movw	r8, r24
				continue;
			}
			str[i]=(intres%10)+48;
 6ce:	cf 01       	movw	r24, r30
 6d0:	b8 01       	movw	r22, r16
 6d2:	0e 94 cf 04 	call	0x99e	; 0x99e <__divmodhi4>
 6d6:	80 5d       	subi	r24, 0xD0	; 208
 6d8:	d4 01       	movw	r26, r8
 6da:	11 96       	adiw	r26, 0x01	; 1
 6dc:	8c 93       	st	X, r24
		
		result=((float)steps*500)/1024;
		
		intres = (int) result;
		
		for(i=3;i>=0;i--){
 6de:	33 23       	and	r19, r19
 6e0:	34 f0       	brlt	.+12     	; 0x6ee <main+0x11e>
				str[i]='.';
				continue;
			}
			str[i]=(intres%10)+48;
			//Lcd4_Write_Char('a');
			intres=intres/10;
 6e2:	cf 01       	movw	r24, r30
 6e4:	b8 01       	movw	r22, r16
 6e6:	0e 94 cf 04 	call	0x99e	; 0x99e <__divmodhi4>
 6ea:	fb 01       	movw	r30, r22
 6ec:	e4 cf       	rjmp	.-56     	; 0x6b6 <main+0xe6>
		}
		
		
		//Lcd4_Clear();
		if(rpm>0) PORTB=0b00000001;
 6ee:	80 91 66 00 	lds	r24, 0x0066
 6f2:	90 91 67 00 	lds	r25, 0x0067
 6f6:	18 16       	cp	r1, r24
 6f8:	19 06       	cpc	r1, r25
 6fa:	14 f4       	brge	.+4      	; 0x700 <main+0x130>
 6fc:	78 ba       	out	0x18, r7	; 24
 6fe:	01 c0       	rjmp	.+2      	; 0x702 <main+0x132>
		else PORTB=0b00000010;
 700:	68 ba       	out	0x18, r6	; 24
		Lcd4_Set_Cursor(1,1);
 702:	67 2d       	mov	r22, r7
 704:	87 2d       	mov	r24, r7
 706:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Set_Cursor>
		Lcd4_Write_String(str);
 70a:	8a e6       	ldi	r24, 0x6A	; 106
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	0e 94 85 02 	call	0x50a	; 0x50a <Lcd4_Write_String>
		char str2[100];
		sprintf(str2,"%d", rpm);
 712:	80 91 66 00 	lds	r24, 0x0066
 716:	90 91 67 00 	lds	r25, 0x0067
 71a:	9f 93       	push	r25
 71c:	8f 93       	push	r24
 71e:	df 92       	push	r13
 720:	cf 92       	push	r12
 722:	ff 92       	push	r15
 724:	ef 92       	push	r14
 726:	0e 94 f7 04 	call	0x9ee	; 0x9ee <sprintf>
		Lcd4_Set_Cursor(2,1);
 72a:	67 2d       	mov	r22, r7
 72c:	86 2d       	mov	r24, r6
 72e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <Lcd4_Set_Cursor>
		Lcd4_Write_String(str2);
 732:	c7 01       	movw	r24, r14
 734:	0e 94 85 02 	call	0x50a	; 0x50a <Lcd4_Write_String>
		//polling();
		//_delay_ms(500);
		if(rpm>380) OCR0=230;
 738:	80 91 66 00 	lds	r24, 0x0066
 73c:	90 91 67 00 	lds	r25, 0x0067
 740:	0f 90       	pop	r0
 742:	0f 90       	pop	r0
 744:	0f 90       	pop	r0
 746:	0f 90       	pop	r0
 748:	0f 90       	pop	r0
 74a:	0f 90       	pop	r0
 74c:	8d 37       	cpi	r24, 0x7D	; 125
 74e:	91 40       	sbci	r25, 0x01	; 1
 750:	0c f4       	brge	.+2      	; 0x754 <main+0x184>
 752:	8c cf       	rjmp	.-232    	; 0x66c <main+0x9c>
 754:	86 ee       	ldi	r24, 0xE6	; 230
 756:	8c bf       	out	0x3c, r24	; 60
    }
 758:	89 cf       	rjmp	.-238    	; 0x66c <main+0x9c>

0000075a <__fixsfsi>:
 75a:	04 d0       	rcall	.+8      	; 0x764 <__fixunssfsi>
 75c:	68 94       	set
 75e:	b1 11       	cpse	r27, r1
 760:	8d c0       	rjmp	.+282    	; 0x87c <__fp_szero>
 762:	08 95       	ret

00000764 <__fixunssfsi>:
 764:	70 d0       	rcall	.+224    	; 0x846 <__fp_splitA>
 766:	88 f0       	brcs	.+34     	; 0x78a <__fixunssfsi+0x26>
 768:	9f 57       	subi	r25, 0x7F	; 127
 76a:	90 f0       	brcs	.+36     	; 0x790 <__fixunssfsi+0x2c>
 76c:	b9 2f       	mov	r27, r25
 76e:	99 27       	eor	r25, r25
 770:	b7 51       	subi	r27, 0x17	; 23
 772:	a0 f0       	brcs	.+40     	; 0x79c <__fixunssfsi+0x38>
 774:	d1 f0       	breq	.+52     	; 0x7aa <__fixunssfsi+0x46>
 776:	66 0f       	add	r22, r22
 778:	77 1f       	adc	r23, r23
 77a:	88 1f       	adc	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	1a f0       	brmi	.+6      	; 0x786 <__fixunssfsi+0x22>
 780:	ba 95       	dec	r27
 782:	c9 f7       	brne	.-14     	; 0x776 <__fixunssfsi+0x12>
 784:	12 c0       	rjmp	.+36     	; 0x7aa <__fixunssfsi+0x46>
 786:	b1 30       	cpi	r27, 0x01	; 1
 788:	81 f0       	breq	.+32     	; 0x7aa <__fixunssfsi+0x46>
 78a:	77 d0       	rcall	.+238    	; 0x87a <__fp_zero>
 78c:	b1 e0       	ldi	r27, 0x01	; 1
 78e:	08 95       	ret
 790:	74 c0       	rjmp	.+232    	; 0x87a <__fp_zero>
 792:	67 2f       	mov	r22, r23
 794:	78 2f       	mov	r23, r24
 796:	88 27       	eor	r24, r24
 798:	b8 5f       	subi	r27, 0xF8	; 248
 79a:	39 f0       	breq	.+14     	; 0x7aa <__fixunssfsi+0x46>
 79c:	b9 3f       	cpi	r27, 0xF9	; 249
 79e:	cc f3       	brlt	.-14     	; 0x792 <__fixunssfsi+0x2e>
 7a0:	86 95       	lsr	r24
 7a2:	77 95       	ror	r23
 7a4:	67 95       	ror	r22
 7a6:	b3 95       	inc	r27
 7a8:	d9 f7       	brne	.-10     	; 0x7a0 <__fixunssfsi+0x3c>
 7aa:	3e f4       	brtc	.+14     	; 0x7ba <__fixunssfsi+0x56>
 7ac:	90 95       	com	r25
 7ae:	80 95       	com	r24
 7b0:	70 95       	com	r23
 7b2:	61 95       	neg	r22
 7b4:	7f 4f       	sbci	r23, 0xFF	; 255
 7b6:	8f 4f       	sbci	r24, 0xFF	; 255
 7b8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ba:	08 95       	ret

000007bc <__floatunsisf>:
 7bc:	e8 94       	clt
 7be:	09 c0       	rjmp	.+18     	; 0x7d2 <__floatsisf+0x12>

000007c0 <__floatsisf>:
 7c0:	97 fb       	bst	r25, 7
 7c2:	3e f4       	brtc	.+14     	; 0x7d2 <__floatsisf+0x12>
 7c4:	90 95       	com	r25
 7c6:	80 95       	com	r24
 7c8:	70 95       	com	r23
 7ca:	61 95       	neg	r22
 7cc:	7f 4f       	sbci	r23, 0xFF	; 255
 7ce:	8f 4f       	sbci	r24, 0xFF	; 255
 7d0:	9f 4f       	sbci	r25, 0xFF	; 255
 7d2:	99 23       	and	r25, r25
 7d4:	a9 f0       	breq	.+42     	; 0x800 <__floatsisf+0x40>
 7d6:	f9 2f       	mov	r31, r25
 7d8:	96 e9       	ldi	r25, 0x96	; 150
 7da:	bb 27       	eor	r27, r27
 7dc:	93 95       	inc	r25
 7de:	f6 95       	lsr	r31
 7e0:	87 95       	ror	r24
 7e2:	77 95       	ror	r23
 7e4:	67 95       	ror	r22
 7e6:	b7 95       	ror	r27
 7e8:	f1 11       	cpse	r31, r1
 7ea:	f8 cf       	rjmp	.-16     	; 0x7dc <__floatsisf+0x1c>
 7ec:	fa f4       	brpl	.+62     	; 0x82c <__floatsisf+0x6c>
 7ee:	bb 0f       	add	r27, r27
 7f0:	11 f4       	brne	.+4      	; 0x7f6 <__floatsisf+0x36>
 7f2:	60 ff       	sbrs	r22, 0
 7f4:	1b c0       	rjmp	.+54     	; 0x82c <__floatsisf+0x6c>
 7f6:	6f 5f       	subi	r22, 0xFF	; 255
 7f8:	7f 4f       	sbci	r23, 0xFF	; 255
 7fa:	8f 4f       	sbci	r24, 0xFF	; 255
 7fc:	9f 4f       	sbci	r25, 0xFF	; 255
 7fe:	16 c0       	rjmp	.+44     	; 0x82c <__floatsisf+0x6c>
 800:	88 23       	and	r24, r24
 802:	11 f0       	breq	.+4      	; 0x808 <__floatsisf+0x48>
 804:	96 e9       	ldi	r25, 0x96	; 150
 806:	11 c0       	rjmp	.+34     	; 0x82a <__floatsisf+0x6a>
 808:	77 23       	and	r23, r23
 80a:	21 f0       	breq	.+8      	; 0x814 <__floatsisf+0x54>
 80c:	9e e8       	ldi	r25, 0x8E	; 142
 80e:	87 2f       	mov	r24, r23
 810:	76 2f       	mov	r23, r22
 812:	05 c0       	rjmp	.+10     	; 0x81e <__floatsisf+0x5e>
 814:	66 23       	and	r22, r22
 816:	71 f0       	breq	.+28     	; 0x834 <__floatsisf+0x74>
 818:	96 e8       	ldi	r25, 0x86	; 134
 81a:	86 2f       	mov	r24, r22
 81c:	70 e0       	ldi	r23, 0x00	; 0
 81e:	60 e0       	ldi	r22, 0x00	; 0
 820:	2a f0       	brmi	.+10     	; 0x82c <__floatsisf+0x6c>
 822:	9a 95       	dec	r25
 824:	66 0f       	add	r22, r22
 826:	77 1f       	adc	r23, r23
 828:	88 1f       	adc	r24, r24
 82a:	da f7       	brpl	.-10     	; 0x822 <__floatsisf+0x62>
 82c:	88 0f       	add	r24, r24
 82e:	96 95       	lsr	r25
 830:	87 95       	ror	r24
 832:	97 f9       	bld	r25, 7
 834:	08 95       	ret

00000836 <__fp_split3>:
 836:	57 fd       	sbrc	r21, 7
 838:	90 58       	subi	r25, 0x80	; 128
 83a:	44 0f       	add	r20, r20
 83c:	55 1f       	adc	r21, r21
 83e:	59 f0       	breq	.+22     	; 0x856 <__fp_splitA+0x10>
 840:	5f 3f       	cpi	r21, 0xFF	; 255
 842:	71 f0       	breq	.+28     	; 0x860 <__stack+0x1>
 844:	47 95       	ror	r20

00000846 <__fp_splitA>:
 846:	88 0f       	add	r24, r24
 848:	97 fb       	bst	r25, 7
 84a:	99 1f       	adc	r25, r25
 84c:	61 f0       	breq	.+24     	; 0x866 <__stack+0x7>
 84e:	9f 3f       	cpi	r25, 0xFF	; 255
 850:	79 f0       	breq	.+30     	; 0x870 <__stack+0x11>
 852:	87 95       	ror	r24
 854:	08 95       	ret
 856:	12 16       	cp	r1, r18
 858:	13 06       	cpc	r1, r19
 85a:	14 06       	cpc	r1, r20
 85c:	55 1f       	adc	r21, r21
 85e:	f2 cf       	rjmp	.-28     	; 0x844 <__fp_split3+0xe>
 860:	46 95       	lsr	r20
 862:	f1 df       	rcall	.-30     	; 0x846 <__fp_splitA>
 864:	08 c0       	rjmp	.+16     	; 0x876 <__stack+0x17>
 866:	16 16       	cp	r1, r22
 868:	17 06       	cpc	r1, r23
 86a:	18 06       	cpc	r1, r24
 86c:	99 1f       	adc	r25, r25
 86e:	f1 cf       	rjmp	.-30     	; 0x852 <__fp_splitA+0xc>
 870:	86 95       	lsr	r24
 872:	71 05       	cpc	r23, r1
 874:	61 05       	cpc	r22, r1
 876:	08 94       	sec
 878:	08 95       	ret

0000087a <__fp_zero>:
 87a:	e8 94       	clt

0000087c <__fp_szero>:
 87c:	bb 27       	eor	r27, r27
 87e:	66 27       	eor	r22, r22
 880:	77 27       	eor	r23, r23
 882:	cb 01       	movw	r24, r22
 884:	97 f9       	bld	r25, 7
 886:	08 95       	ret

00000888 <__mulsf3>:
 888:	0b d0       	rcall	.+22     	; 0x8a0 <__mulsf3x>
 88a:	78 c0       	rjmp	.+240    	; 0x97c <__fp_round>
 88c:	69 d0       	rcall	.+210    	; 0x960 <__fp_pscA>
 88e:	28 f0       	brcs	.+10     	; 0x89a <__mulsf3+0x12>
 890:	6e d0       	rcall	.+220    	; 0x96e <__fp_pscB>
 892:	18 f0       	brcs	.+6      	; 0x89a <__mulsf3+0x12>
 894:	95 23       	and	r25, r21
 896:	09 f0       	breq	.+2      	; 0x89a <__mulsf3+0x12>
 898:	5a c0       	rjmp	.+180    	; 0x94e <__fp_inf>
 89a:	5f c0       	rjmp	.+190    	; 0x95a <__fp_nan>
 89c:	11 24       	eor	r1, r1
 89e:	ee cf       	rjmp	.-36     	; 0x87c <__fp_szero>

000008a0 <__mulsf3x>:
 8a0:	ca df       	rcall	.-108    	; 0x836 <__fp_split3>
 8a2:	a0 f3       	brcs	.-24     	; 0x88c <__mulsf3+0x4>

000008a4 <__mulsf3_pse>:
 8a4:	95 9f       	mul	r25, r21
 8a6:	d1 f3       	breq	.-12     	; 0x89c <__mulsf3+0x14>
 8a8:	95 0f       	add	r25, r21
 8aa:	50 e0       	ldi	r21, 0x00	; 0
 8ac:	55 1f       	adc	r21, r21
 8ae:	62 9f       	mul	r22, r18
 8b0:	f0 01       	movw	r30, r0
 8b2:	72 9f       	mul	r23, r18
 8b4:	bb 27       	eor	r27, r27
 8b6:	f0 0d       	add	r31, r0
 8b8:	b1 1d       	adc	r27, r1
 8ba:	63 9f       	mul	r22, r19
 8bc:	aa 27       	eor	r26, r26
 8be:	f0 0d       	add	r31, r0
 8c0:	b1 1d       	adc	r27, r1
 8c2:	aa 1f       	adc	r26, r26
 8c4:	64 9f       	mul	r22, r20
 8c6:	66 27       	eor	r22, r22
 8c8:	b0 0d       	add	r27, r0
 8ca:	a1 1d       	adc	r26, r1
 8cc:	66 1f       	adc	r22, r22
 8ce:	82 9f       	mul	r24, r18
 8d0:	22 27       	eor	r18, r18
 8d2:	b0 0d       	add	r27, r0
 8d4:	a1 1d       	adc	r26, r1
 8d6:	62 1f       	adc	r22, r18
 8d8:	73 9f       	mul	r23, r19
 8da:	b0 0d       	add	r27, r0
 8dc:	a1 1d       	adc	r26, r1
 8de:	62 1f       	adc	r22, r18
 8e0:	83 9f       	mul	r24, r19
 8e2:	a0 0d       	add	r26, r0
 8e4:	61 1d       	adc	r22, r1
 8e6:	22 1f       	adc	r18, r18
 8e8:	74 9f       	mul	r23, r20
 8ea:	33 27       	eor	r19, r19
 8ec:	a0 0d       	add	r26, r0
 8ee:	61 1d       	adc	r22, r1
 8f0:	23 1f       	adc	r18, r19
 8f2:	84 9f       	mul	r24, r20
 8f4:	60 0d       	add	r22, r0
 8f6:	21 1d       	adc	r18, r1
 8f8:	82 2f       	mov	r24, r18
 8fa:	76 2f       	mov	r23, r22
 8fc:	6a 2f       	mov	r22, r26
 8fe:	11 24       	eor	r1, r1
 900:	9f 57       	subi	r25, 0x7F	; 127
 902:	50 40       	sbci	r21, 0x00	; 0
 904:	8a f0       	brmi	.+34     	; 0x928 <__mulsf3_pse+0x84>
 906:	e1 f0       	breq	.+56     	; 0x940 <__mulsf3_pse+0x9c>
 908:	88 23       	and	r24, r24
 90a:	4a f0       	brmi	.+18     	; 0x91e <__mulsf3_pse+0x7a>
 90c:	ee 0f       	add	r30, r30
 90e:	ff 1f       	adc	r31, r31
 910:	bb 1f       	adc	r27, r27
 912:	66 1f       	adc	r22, r22
 914:	77 1f       	adc	r23, r23
 916:	88 1f       	adc	r24, r24
 918:	91 50       	subi	r25, 0x01	; 1
 91a:	50 40       	sbci	r21, 0x00	; 0
 91c:	a9 f7       	brne	.-22     	; 0x908 <__mulsf3_pse+0x64>
 91e:	9e 3f       	cpi	r25, 0xFE	; 254
 920:	51 05       	cpc	r21, r1
 922:	70 f0       	brcs	.+28     	; 0x940 <__mulsf3_pse+0x9c>
 924:	14 c0       	rjmp	.+40     	; 0x94e <__fp_inf>
 926:	aa cf       	rjmp	.-172    	; 0x87c <__fp_szero>
 928:	5f 3f       	cpi	r21, 0xFF	; 255
 92a:	ec f3       	brlt	.-6      	; 0x926 <__mulsf3_pse+0x82>
 92c:	98 3e       	cpi	r25, 0xE8	; 232
 92e:	dc f3       	brlt	.-10     	; 0x926 <__mulsf3_pse+0x82>
 930:	86 95       	lsr	r24
 932:	77 95       	ror	r23
 934:	67 95       	ror	r22
 936:	b7 95       	ror	r27
 938:	f7 95       	ror	r31
 93a:	e7 95       	ror	r30
 93c:	9f 5f       	subi	r25, 0xFF	; 255
 93e:	c1 f7       	brne	.-16     	; 0x930 <__mulsf3_pse+0x8c>
 940:	fe 2b       	or	r31, r30
 942:	88 0f       	add	r24, r24
 944:	91 1d       	adc	r25, r1
 946:	96 95       	lsr	r25
 948:	87 95       	ror	r24
 94a:	97 f9       	bld	r25, 7
 94c:	08 95       	ret

0000094e <__fp_inf>:
 94e:	97 f9       	bld	r25, 7
 950:	9f 67       	ori	r25, 0x7F	; 127
 952:	80 e8       	ldi	r24, 0x80	; 128
 954:	70 e0       	ldi	r23, 0x00	; 0
 956:	60 e0       	ldi	r22, 0x00	; 0
 958:	08 95       	ret

0000095a <__fp_nan>:
 95a:	9f ef       	ldi	r25, 0xFF	; 255
 95c:	80 ec       	ldi	r24, 0xC0	; 192
 95e:	08 95       	ret

00000960 <__fp_pscA>:
 960:	00 24       	eor	r0, r0
 962:	0a 94       	dec	r0
 964:	16 16       	cp	r1, r22
 966:	17 06       	cpc	r1, r23
 968:	18 06       	cpc	r1, r24
 96a:	09 06       	cpc	r0, r25
 96c:	08 95       	ret

0000096e <__fp_pscB>:
 96e:	00 24       	eor	r0, r0
 970:	0a 94       	dec	r0
 972:	12 16       	cp	r1, r18
 974:	13 06       	cpc	r1, r19
 976:	14 06       	cpc	r1, r20
 978:	05 06       	cpc	r0, r21
 97a:	08 95       	ret

0000097c <__fp_round>:
 97c:	09 2e       	mov	r0, r25
 97e:	03 94       	inc	r0
 980:	00 0c       	add	r0, r0
 982:	11 f4       	brne	.+4      	; 0x988 <__fp_round+0xc>
 984:	88 23       	and	r24, r24
 986:	52 f0       	brmi	.+20     	; 0x99c <__fp_round+0x20>
 988:	bb 0f       	add	r27, r27
 98a:	40 f4       	brcc	.+16     	; 0x99c <__fp_round+0x20>
 98c:	bf 2b       	or	r27, r31
 98e:	11 f4       	brne	.+4      	; 0x994 <__fp_round+0x18>
 990:	60 ff       	sbrs	r22, 0
 992:	04 c0       	rjmp	.+8      	; 0x99c <__fp_round+0x20>
 994:	6f 5f       	subi	r22, 0xFF	; 255
 996:	7f 4f       	sbci	r23, 0xFF	; 255
 998:	8f 4f       	sbci	r24, 0xFF	; 255
 99a:	9f 4f       	sbci	r25, 0xFF	; 255
 99c:	08 95       	ret

0000099e <__divmodhi4>:
 99e:	97 fb       	bst	r25, 7
 9a0:	07 2e       	mov	r0, r23
 9a2:	16 f4       	brtc	.+4      	; 0x9a8 <__divmodhi4+0xa>
 9a4:	00 94       	com	r0
 9a6:	07 d0       	rcall	.+14     	; 0x9b6 <__divmodhi4_neg1>
 9a8:	77 fd       	sbrc	r23, 7
 9aa:	09 d0       	rcall	.+18     	; 0x9be <__divmodhi4_neg2>
 9ac:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__udivmodhi4>
 9b0:	07 fc       	sbrc	r0, 7
 9b2:	05 d0       	rcall	.+10     	; 0x9be <__divmodhi4_neg2>
 9b4:	3e f4       	brtc	.+14     	; 0x9c4 <__divmodhi4_exit>

000009b6 <__divmodhi4_neg1>:
 9b6:	90 95       	com	r25
 9b8:	81 95       	neg	r24
 9ba:	9f 4f       	sbci	r25, 0xFF	; 255
 9bc:	08 95       	ret

000009be <__divmodhi4_neg2>:
 9be:	70 95       	com	r23
 9c0:	61 95       	neg	r22
 9c2:	7f 4f       	sbci	r23, 0xFF	; 255

000009c4 <__divmodhi4_exit>:
 9c4:	08 95       	ret

000009c6 <__udivmodhi4>:
 9c6:	aa 1b       	sub	r26, r26
 9c8:	bb 1b       	sub	r27, r27
 9ca:	51 e1       	ldi	r21, 0x11	; 17
 9cc:	07 c0       	rjmp	.+14     	; 0x9dc <__udivmodhi4_ep>

000009ce <__udivmodhi4_loop>:
 9ce:	aa 1f       	adc	r26, r26
 9d0:	bb 1f       	adc	r27, r27
 9d2:	a6 17       	cp	r26, r22
 9d4:	b7 07       	cpc	r27, r23
 9d6:	10 f0       	brcs	.+4      	; 0x9dc <__udivmodhi4_ep>
 9d8:	a6 1b       	sub	r26, r22
 9da:	b7 0b       	sbc	r27, r23

000009dc <__udivmodhi4_ep>:
 9dc:	88 1f       	adc	r24, r24
 9de:	99 1f       	adc	r25, r25
 9e0:	5a 95       	dec	r21
 9e2:	a9 f7       	brne	.-22     	; 0x9ce <__udivmodhi4_loop>
 9e4:	80 95       	com	r24
 9e6:	90 95       	com	r25
 9e8:	bc 01       	movw	r22, r24
 9ea:	cd 01       	movw	r24, r26
 9ec:	08 95       	ret

000009ee <sprintf>:
 9ee:	ae e0       	ldi	r26, 0x0E	; 14
 9f0:	b0 e0       	ldi	r27, 0x00	; 0
 9f2:	ed ef       	ldi	r30, 0xFD	; 253
 9f4:	f4 e0       	ldi	r31, 0x04	; 4
 9f6:	0c 94 9f 07 	jmp	0xf3e	; 0xf3e <__prologue_saves__+0x1c>
 9fa:	0d 89       	ldd	r16, Y+21	; 0x15
 9fc:	1e 89       	ldd	r17, Y+22	; 0x16
 9fe:	86 e0       	ldi	r24, 0x06	; 6
 a00:	8c 83       	std	Y+4, r24	; 0x04
 a02:	1a 83       	std	Y+2, r17	; 0x02
 a04:	09 83       	std	Y+1, r16	; 0x01
 a06:	8f ef       	ldi	r24, 0xFF	; 255
 a08:	9f e7       	ldi	r25, 0x7F	; 127
 a0a:	9e 83       	std	Y+6, r25	; 0x06
 a0c:	8d 83       	std	Y+5, r24	; 0x05
 a0e:	ae 01       	movw	r20, r28
 a10:	47 5e       	subi	r20, 0xE7	; 231
 a12:	5f 4f       	sbci	r21, 0xFF	; 255
 a14:	6f 89       	ldd	r22, Y+23	; 0x17
 a16:	78 8d       	ldd	r23, Y+24	; 0x18
 a18:	ce 01       	movw	r24, r28
 a1a:	01 96       	adiw	r24, 0x01	; 1
 a1c:	0e 94 19 05 	call	0xa32	; 0xa32 <vfprintf>
 a20:	ef 81       	ldd	r30, Y+7	; 0x07
 a22:	f8 85       	ldd	r31, Y+8	; 0x08
 a24:	e0 0f       	add	r30, r16
 a26:	f1 1f       	adc	r31, r17
 a28:	10 82       	st	Z, r1
 a2a:	2e 96       	adiw	r28, 0x0e	; 14
 a2c:	e4 e0       	ldi	r30, 0x04	; 4
 a2e:	0c 94 bb 07 	jmp	0xf76	; 0xf76 <__epilogue_restores__+0x1c>

00000a32 <vfprintf>:
 a32:	ac e0       	ldi	r26, 0x0C	; 12
 a34:	b0 e0       	ldi	r27, 0x00	; 0
 a36:	ef e1       	ldi	r30, 0x1F	; 31
 a38:	f5 e0       	ldi	r31, 0x05	; 5
 a3a:	0c 94 91 07 	jmp	0xf22	; 0xf22 <__prologue_saves__>
 a3e:	7c 01       	movw	r14, r24
 a40:	6b 01       	movw	r12, r22
 a42:	8a 01       	movw	r16, r20
 a44:	fc 01       	movw	r30, r24
 a46:	17 82       	std	Z+7, r1	; 0x07
 a48:	16 82       	std	Z+6, r1	; 0x06
 a4a:	83 81       	ldd	r24, Z+3	; 0x03
 a4c:	81 ff       	sbrs	r24, 1
 a4e:	bd c1       	rjmp	.+890    	; 0xdca <vfprintf+0x398>
 a50:	ce 01       	movw	r24, r28
 a52:	01 96       	adiw	r24, 0x01	; 1
 a54:	4c 01       	movw	r8, r24
 a56:	f7 01       	movw	r30, r14
 a58:	93 81       	ldd	r25, Z+3	; 0x03
 a5a:	f6 01       	movw	r30, r12
 a5c:	93 fd       	sbrc	r25, 3
 a5e:	85 91       	lpm	r24, Z+
 a60:	93 ff       	sbrs	r25, 3
 a62:	81 91       	ld	r24, Z+
 a64:	6f 01       	movw	r12, r30
 a66:	88 23       	and	r24, r24
 a68:	09 f4       	brne	.+2      	; 0xa6c <vfprintf+0x3a>
 a6a:	ab c1       	rjmp	.+854    	; 0xdc2 <vfprintf+0x390>
 a6c:	85 32       	cpi	r24, 0x25	; 37
 a6e:	39 f4       	brne	.+14     	; 0xa7e <vfprintf+0x4c>
 a70:	93 fd       	sbrc	r25, 3
 a72:	85 91       	lpm	r24, Z+
 a74:	93 ff       	sbrs	r25, 3
 a76:	81 91       	ld	r24, Z+
 a78:	6f 01       	movw	r12, r30
 a7a:	85 32       	cpi	r24, 0x25	; 37
 a7c:	29 f4       	brne	.+10     	; 0xa88 <vfprintf+0x56>
 a7e:	b7 01       	movw	r22, r14
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	0e 94 01 07 	call	0xe02	; 0xe02 <fputc>
 a86:	e7 cf       	rjmp	.-50     	; 0xa56 <vfprintf+0x24>
 a88:	51 2c       	mov	r5, r1
 a8a:	31 2c       	mov	r3, r1
 a8c:	20 e0       	ldi	r18, 0x00	; 0
 a8e:	20 32       	cpi	r18, 0x20	; 32
 a90:	a0 f4       	brcc	.+40     	; 0xaba <vfprintf+0x88>
 a92:	8b 32       	cpi	r24, 0x2B	; 43
 a94:	69 f0       	breq	.+26     	; 0xab0 <vfprintf+0x7e>
 a96:	30 f4       	brcc	.+12     	; 0xaa4 <vfprintf+0x72>
 a98:	80 32       	cpi	r24, 0x20	; 32
 a9a:	59 f0       	breq	.+22     	; 0xab2 <vfprintf+0x80>
 a9c:	83 32       	cpi	r24, 0x23	; 35
 a9e:	69 f4       	brne	.+26     	; 0xaba <vfprintf+0x88>
 aa0:	20 61       	ori	r18, 0x10	; 16
 aa2:	2c c0       	rjmp	.+88     	; 0xafc <vfprintf+0xca>
 aa4:	8d 32       	cpi	r24, 0x2D	; 45
 aa6:	39 f0       	breq	.+14     	; 0xab6 <vfprintf+0x84>
 aa8:	80 33       	cpi	r24, 0x30	; 48
 aaa:	39 f4       	brne	.+14     	; 0xaba <vfprintf+0x88>
 aac:	21 60       	ori	r18, 0x01	; 1
 aae:	26 c0       	rjmp	.+76     	; 0xafc <vfprintf+0xca>
 ab0:	22 60       	ori	r18, 0x02	; 2
 ab2:	24 60       	ori	r18, 0x04	; 4
 ab4:	23 c0       	rjmp	.+70     	; 0xafc <vfprintf+0xca>
 ab6:	28 60       	ori	r18, 0x08	; 8
 ab8:	21 c0       	rjmp	.+66     	; 0xafc <vfprintf+0xca>
 aba:	27 fd       	sbrc	r18, 7
 abc:	27 c0       	rjmp	.+78     	; 0xb0c <vfprintf+0xda>
 abe:	30 ed       	ldi	r19, 0xD0	; 208
 ac0:	38 0f       	add	r19, r24
 ac2:	3a 30       	cpi	r19, 0x0A	; 10
 ac4:	78 f4       	brcc	.+30     	; 0xae4 <vfprintf+0xb2>
 ac6:	26 ff       	sbrs	r18, 6
 ac8:	06 c0       	rjmp	.+12     	; 0xad6 <vfprintf+0xa4>
 aca:	fa e0       	ldi	r31, 0x0A	; 10
 acc:	5f 9e       	mul	r5, r31
 ace:	30 0d       	add	r19, r0
 ad0:	11 24       	eor	r1, r1
 ad2:	53 2e       	mov	r5, r19
 ad4:	13 c0       	rjmp	.+38     	; 0xafc <vfprintf+0xca>
 ad6:	8a e0       	ldi	r24, 0x0A	; 10
 ad8:	38 9e       	mul	r3, r24
 ada:	30 0d       	add	r19, r0
 adc:	11 24       	eor	r1, r1
 ade:	33 2e       	mov	r3, r19
 ae0:	20 62       	ori	r18, 0x20	; 32
 ae2:	0c c0       	rjmp	.+24     	; 0xafc <vfprintf+0xca>
 ae4:	8e 32       	cpi	r24, 0x2E	; 46
 ae6:	21 f4       	brne	.+8      	; 0xaf0 <vfprintf+0xbe>
 ae8:	26 fd       	sbrc	r18, 6
 aea:	6b c1       	rjmp	.+726    	; 0xdc2 <vfprintf+0x390>
 aec:	20 64       	ori	r18, 0x40	; 64
 aee:	06 c0       	rjmp	.+12     	; 0xafc <vfprintf+0xca>
 af0:	8c 36       	cpi	r24, 0x6C	; 108
 af2:	11 f4       	brne	.+4      	; 0xaf8 <vfprintf+0xc6>
 af4:	20 68       	ori	r18, 0x80	; 128
 af6:	02 c0       	rjmp	.+4      	; 0xafc <vfprintf+0xca>
 af8:	88 36       	cpi	r24, 0x68	; 104
 afa:	41 f4       	brne	.+16     	; 0xb0c <vfprintf+0xda>
 afc:	f6 01       	movw	r30, r12
 afe:	93 fd       	sbrc	r25, 3
 b00:	85 91       	lpm	r24, Z+
 b02:	93 ff       	sbrs	r25, 3
 b04:	81 91       	ld	r24, Z+
 b06:	6f 01       	movw	r12, r30
 b08:	81 11       	cpse	r24, r1
 b0a:	c1 cf       	rjmp	.-126    	; 0xa8e <vfprintf+0x5c>
 b0c:	98 2f       	mov	r25, r24
 b0e:	9f 7d       	andi	r25, 0xDF	; 223
 b10:	95 54       	subi	r25, 0x45	; 69
 b12:	93 30       	cpi	r25, 0x03	; 3
 b14:	28 f4       	brcc	.+10     	; 0xb20 <vfprintf+0xee>
 b16:	0c 5f       	subi	r16, 0xFC	; 252
 b18:	1f 4f       	sbci	r17, 0xFF	; 255
 b1a:	ff e3       	ldi	r31, 0x3F	; 63
 b1c:	f9 83       	std	Y+1, r31	; 0x01
 b1e:	0d c0       	rjmp	.+26     	; 0xb3a <vfprintf+0x108>
 b20:	83 36       	cpi	r24, 0x63	; 99
 b22:	31 f0       	breq	.+12     	; 0xb30 <vfprintf+0xfe>
 b24:	83 37       	cpi	r24, 0x73	; 115
 b26:	71 f0       	breq	.+28     	; 0xb44 <vfprintf+0x112>
 b28:	83 35       	cpi	r24, 0x53	; 83
 b2a:	09 f0       	breq	.+2      	; 0xb2e <vfprintf+0xfc>
 b2c:	5b c0       	rjmp	.+182    	; 0xbe4 <vfprintf+0x1b2>
 b2e:	22 c0       	rjmp	.+68     	; 0xb74 <vfprintf+0x142>
 b30:	f8 01       	movw	r30, r16
 b32:	80 81       	ld	r24, Z
 b34:	89 83       	std	Y+1, r24	; 0x01
 b36:	0e 5f       	subi	r16, 0xFE	; 254
 b38:	1f 4f       	sbci	r17, 0xFF	; 255
 b3a:	44 24       	eor	r4, r4
 b3c:	43 94       	inc	r4
 b3e:	51 2c       	mov	r5, r1
 b40:	54 01       	movw	r10, r8
 b42:	15 c0       	rjmp	.+42     	; 0xb6e <vfprintf+0x13c>
 b44:	38 01       	movw	r6, r16
 b46:	f2 e0       	ldi	r31, 0x02	; 2
 b48:	6f 0e       	add	r6, r31
 b4a:	71 1c       	adc	r7, r1
 b4c:	f8 01       	movw	r30, r16
 b4e:	a0 80       	ld	r10, Z
 b50:	b1 80       	ldd	r11, Z+1	; 0x01
 b52:	26 ff       	sbrs	r18, 6
 b54:	03 c0       	rjmp	.+6      	; 0xb5c <vfprintf+0x12a>
 b56:	65 2d       	mov	r22, r5
 b58:	70 e0       	ldi	r23, 0x00	; 0
 b5a:	02 c0       	rjmp	.+4      	; 0xb60 <vfprintf+0x12e>
 b5c:	6f ef       	ldi	r22, 0xFF	; 255
 b5e:	7f ef       	ldi	r23, 0xFF	; 255
 b60:	c5 01       	movw	r24, r10
 b62:	2c 87       	std	Y+12, r18	; 0x0c
 b64:	0e 94 f6 06 	call	0xdec	; 0xdec <strnlen>
 b68:	2c 01       	movw	r4, r24
 b6a:	83 01       	movw	r16, r6
 b6c:	2c 85       	ldd	r18, Y+12	; 0x0c
 b6e:	2f 77       	andi	r18, 0x7F	; 127
 b70:	22 2e       	mov	r2, r18
 b72:	17 c0       	rjmp	.+46     	; 0xba2 <vfprintf+0x170>
 b74:	38 01       	movw	r6, r16
 b76:	f2 e0       	ldi	r31, 0x02	; 2
 b78:	6f 0e       	add	r6, r31
 b7a:	71 1c       	adc	r7, r1
 b7c:	f8 01       	movw	r30, r16
 b7e:	a0 80       	ld	r10, Z
 b80:	b1 80       	ldd	r11, Z+1	; 0x01
 b82:	26 ff       	sbrs	r18, 6
 b84:	03 c0       	rjmp	.+6      	; 0xb8c <vfprintf+0x15a>
 b86:	65 2d       	mov	r22, r5
 b88:	70 e0       	ldi	r23, 0x00	; 0
 b8a:	02 c0       	rjmp	.+4      	; 0xb90 <vfprintf+0x15e>
 b8c:	6f ef       	ldi	r22, 0xFF	; 255
 b8e:	7f ef       	ldi	r23, 0xFF	; 255
 b90:	c5 01       	movw	r24, r10
 b92:	2c 87       	std	Y+12, r18	; 0x0c
 b94:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <strnlen_P>
 b98:	2c 01       	movw	r4, r24
 b9a:	2c 85       	ldd	r18, Y+12	; 0x0c
 b9c:	20 68       	ori	r18, 0x80	; 128
 b9e:	22 2e       	mov	r2, r18
 ba0:	83 01       	movw	r16, r6
 ba2:	23 fc       	sbrc	r2, 3
 ba4:	1b c0       	rjmp	.+54     	; 0xbdc <vfprintf+0x1aa>
 ba6:	83 2d       	mov	r24, r3
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	48 16       	cp	r4, r24
 bac:	59 06       	cpc	r5, r25
 bae:	b0 f4       	brcc	.+44     	; 0xbdc <vfprintf+0x1aa>
 bb0:	b7 01       	movw	r22, r14
 bb2:	80 e2       	ldi	r24, 0x20	; 32
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	0e 94 01 07 	call	0xe02	; 0xe02 <fputc>
 bba:	3a 94       	dec	r3
 bbc:	f4 cf       	rjmp	.-24     	; 0xba6 <vfprintf+0x174>
 bbe:	f5 01       	movw	r30, r10
 bc0:	27 fc       	sbrc	r2, 7
 bc2:	85 91       	lpm	r24, Z+
 bc4:	27 fe       	sbrs	r2, 7
 bc6:	81 91       	ld	r24, Z+
 bc8:	5f 01       	movw	r10, r30
 bca:	b7 01       	movw	r22, r14
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	0e 94 01 07 	call	0xe02	; 0xe02 <fputc>
 bd2:	31 10       	cpse	r3, r1
 bd4:	3a 94       	dec	r3
 bd6:	f1 e0       	ldi	r31, 0x01	; 1
 bd8:	4f 1a       	sub	r4, r31
 bda:	51 08       	sbc	r5, r1
 bdc:	41 14       	cp	r4, r1
 bde:	51 04       	cpc	r5, r1
 be0:	71 f7       	brne	.-36     	; 0xbbe <vfprintf+0x18c>
 be2:	e5 c0       	rjmp	.+458    	; 0xdae <vfprintf+0x37c>
 be4:	84 36       	cpi	r24, 0x64	; 100
 be6:	11 f0       	breq	.+4      	; 0xbec <vfprintf+0x1ba>
 be8:	89 36       	cpi	r24, 0x69	; 105
 bea:	39 f5       	brne	.+78     	; 0xc3a <vfprintf+0x208>
 bec:	f8 01       	movw	r30, r16
 bee:	27 ff       	sbrs	r18, 7
 bf0:	07 c0       	rjmp	.+14     	; 0xc00 <vfprintf+0x1ce>
 bf2:	60 81       	ld	r22, Z
 bf4:	71 81       	ldd	r23, Z+1	; 0x01
 bf6:	82 81       	ldd	r24, Z+2	; 0x02
 bf8:	93 81       	ldd	r25, Z+3	; 0x03
 bfa:	0c 5f       	subi	r16, 0xFC	; 252
 bfc:	1f 4f       	sbci	r17, 0xFF	; 255
 bfe:	08 c0       	rjmp	.+16     	; 0xc10 <vfprintf+0x1de>
 c00:	60 81       	ld	r22, Z
 c02:	71 81       	ldd	r23, Z+1	; 0x01
 c04:	88 27       	eor	r24, r24
 c06:	77 fd       	sbrc	r23, 7
 c08:	80 95       	com	r24
 c0a:	98 2f       	mov	r25, r24
 c0c:	0e 5f       	subi	r16, 0xFE	; 254
 c0e:	1f 4f       	sbci	r17, 0xFF	; 255
 c10:	2f 76       	andi	r18, 0x6F	; 111
 c12:	b2 2e       	mov	r11, r18
 c14:	97 ff       	sbrs	r25, 7
 c16:	09 c0       	rjmp	.+18     	; 0xc2a <vfprintf+0x1f8>
 c18:	90 95       	com	r25
 c1a:	80 95       	com	r24
 c1c:	70 95       	com	r23
 c1e:	61 95       	neg	r22
 c20:	7f 4f       	sbci	r23, 0xFF	; 255
 c22:	8f 4f       	sbci	r24, 0xFF	; 255
 c24:	9f 4f       	sbci	r25, 0xFF	; 255
 c26:	20 68       	ori	r18, 0x80	; 128
 c28:	b2 2e       	mov	r11, r18
 c2a:	2a e0       	ldi	r18, 0x0A	; 10
 c2c:	30 e0       	ldi	r19, 0x00	; 0
 c2e:	a4 01       	movw	r20, r8
 c30:	0e 94 33 07 	call	0xe66	; 0xe66 <__ultoa_invert>
 c34:	a8 2e       	mov	r10, r24
 c36:	a8 18       	sub	r10, r8
 c38:	44 c0       	rjmp	.+136    	; 0xcc2 <vfprintf+0x290>
 c3a:	85 37       	cpi	r24, 0x75	; 117
 c3c:	29 f4       	brne	.+10     	; 0xc48 <vfprintf+0x216>
 c3e:	2f 7e       	andi	r18, 0xEF	; 239
 c40:	b2 2e       	mov	r11, r18
 c42:	2a e0       	ldi	r18, 0x0A	; 10
 c44:	30 e0       	ldi	r19, 0x00	; 0
 c46:	25 c0       	rjmp	.+74     	; 0xc92 <vfprintf+0x260>
 c48:	f2 2f       	mov	r31, r18
 c4a:	f9 7f       	andi	r31, 0xF9	; 249
 c4c:	bf 2e       	mov	r11, r31
 c4e:	8f 36       	cpi	r24, 0x6F	; 111
 c50:	c1 f0       	breq	.+48     	; 0xc82 <vfprintf+0x250>
 c52:	18 f4       	brcc	.+6      	; 0xc5a <vfprintf+0x228>
 c54:	88 35       	cpi	r24, 0x58	; 88
 c56:	79 f0       	breq	.+30     	; 0xc76 <vfprintf+0x244>
 c58:	b4 c0       	rjmp	.+360    	; 0xdc2 <vfprintf+0x390>
 c5a:	80 37       	cpi	r24, 0x70	; 112
 c5c:	19 f0       	breq	.+6      	; 0xc64 <vfprintf+0x232>
 c5e:	88 37       	cpi	r24, 0x78	; 120
 c60:	21 f0       	breq	.+8      	; 0xc6a <vfprintf+0x238>
 c62:	af c0       	rjmp	.+350    	; 0xdc2 <vfprintf+0x390>
 c64:	2f 2f       	mov	r18, r31
 c66:	20 61       	ori	r18, 0x10	; 16
 c68:	b2 2e       	mov	r11, r18
 c6a:	b4 fe       	sbrs	r11, 4
 c6c:	0d c0       	rjmp	.+26     	; 0xc88 <vfprintf+0x256>
 c6e:	8b 2d       	mov	r24, r11
 c70:	84 60       	ori	r24, 0x04	; 4
 c72:	b8 2e       	mov	r11, r24
 c74:	09 c0       	rjmp	.+18     	; 0xc88 <vfprintf+0x256>
 c76:	24 ff       	sbrs	r18, 4
 c78:	0a c0       	rjmp	.+20     	; 0xc8e <vfprintf+0x25c>
 c7a:	9f 2f       	mov	r25, r31
 c7c:	96 60       	ori	r25, 0x06	; 6
 c7e:	b9 2e       	mov	r11, r25
 c80:	06 c0       	rjmp	.+12     	; 0xc8e <vfprintf+0x25c>
 c82:	28 e0       	ldi	r18, 0x08	; 8
 c84:	30 e0       	ldi	r19, 0x00	; 0
 c86:	05 c0       	rjmp	.+10     	; 0xc92 <vfprintf+0x260>
 c88:	20 e1       	ldi	r18, 0x10	; 16
 c8a:	30 e0       	ldi	r19, 0x00	; 0
 c8c:	02 c0       	rjmp	.+4      	; 0xc92 <vfprintf+0x260>
 c8e:	20 e1       	ldi	r18, 0x10	; 16
 c90:	32 e0       	ldi	r19, 0x02	; 2
 c92:	f8 01       	movw	r30, r16
 c94:	b7 fe       	sbrs	r11, 7
 c96:	07 c0       	rjmp	.+14     	; 0xca6 <vfprintf+0x274>
 c98:	60 81       	ld	r22, Z
 c9a:	71 81       	ldd	r23, Z+1	; 0x01
 c9c:	82 81       	ldd	r24, Z+2	; 0x02
 c9e:	93 81       	ldd	r25, Z+3	; 0x03
 ca0:	0c 5f       	subi	r16, 0xFC	; 252
 ca2:	1f 4f       	sbci	r17, 0xFF	; 255
 ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <vfprintf+0x280>
 ca6:	60 81       	ld	r22, Z
 ca8:	71 81       	ldd	r23, Z+1	; 0x01
 caa:	80 e0       	ldi	r24, 0x00	; 0
 cac:	90 e0       	ldi	r25, 0x00	; 0
 cae:	0e 5f       	subi	r16, 0xFE	; 254
 cb0:	1f 4f       	sbci	r17, 0xFF	; 255
 cb2:	a4 01       	movw	r20, r8
 cb4:	0e 94 33 07 	call	0xe66	; 0xe66 <__ultoa_invert>
 cb8:	a8 2e       	mov	r10, r24
 cba:	a8 18       	sub	r10, r8
 cbc:	fb 2d       	mov	r31, r11
 cbe:	ff 77       	andi	r31, 0x7F	; 127
 cc0:	bf 2e       	mov	r11, r31
 cc2:	b6 fe       	sbrs	r11, 6
 cc4:	0b c0       	rjmp	.+22     	; 0xcdc <vfprintf+0x2aa>
 cc6:	2b 2d       	mov	r18, r11
 cc8:	2e 7f       	andi	r18, 0xFE	; 254
 cca:	a5 14       	cp	r10, r5
 ccc:	50 f4       	brcc	.+20     	; 0xce2 <vfprintf+0x2b0>
 cce:	b4 fe       	sbrs	r11, 4
 cd0:	0a c0       	rjmp	.+20     	; 0xce6 <vfprintf+0x2b4>
 cd2:	b2 fc       	sbrc	r11, 2
 cd4:	08 c0       	rjmp	.+16     	; 0xce6 <vfprintf+0x2b4>
 cd6:	2b 2d       	mov	r18, r11
 cd8:	2e 7e       	andi	r18, 0xEE	; 238
 cda:	05 c0       	rjmp	.+10     	; 0xce6 <vfprintf+0x2b4>
 cdc:	7a 2c       	mov	r7, r10
 cde:	2b 2d       	mov	r18, r11
 ce0:	03 c0       	rjmp	.+6      	; 0xce8 <vfprintf+0x2b6>
 ce2:	7a 2c       	mov	r7, r10
 ce4:	01 c0       	rjmp	.+2      	; 0xce8 <vfprintf+0x2b6>
 ce6:	75 2c       	mov	r7, r5
 ce8:	24 ff       	sbrs	r18, 4
 cea:	0d c0       	rjmp	.+26     	; 0xd06 <vfprintf+0x2d4>
 cec:	fe 01       	movw	r30, r28
 cee:	ea 0d       	add	r30, r10
 cf0:	f1 1d       	adc	r31, r1
 cf2:	80 81       	ld	r24, Z
 cf4:	80 33       	cpi	r24, 0x30	; 48
 cf6:	11 f4       	brne	.+4      	; 0xcfc <vfprintf+0x2ca>
 cf8:	29 7e       	andi	r18, 0xE9	; 233
 cfa:	09 c0       	rjmp	.+18     	; 0xd0e <vfprintf+0x2dc>
 cfc:	22 ff       	sbrs	r18, 2
 cfe:	06 c0       	rjmp	.+12     	; 0xd0c <vfprintf+0x2da>
 d00:	73 94       	inc	r7
 d02:	73 94       	inc	r7
 d04:	04 c0       	rjmp	.+8      	; 0xd0e <vfprintf+0x2dc>
 d06:	82 2f       	mov	r24, r18
 d08:	86 78       	andi	r24, 0x86	; 134
 d0a:	09 f0       	breq	.+2      	; 0xd0e <vfprintf+0x2dc>
 d0c:	73 94       	inc	r7
 d0e:	23 fd       	sbrc	r18, 3
 d10:	13 c0       	rjmp	.+38     	; 0xd38 <vfprintf+0x306>
 d12:	20 ff       	sbrs	r18, 0
 d14:	06 c0       	rjmp	.+12     	; 0xd22 <vfprintf+0x2f0>
 d16:	5a 2c       	mov	r5, r10
 d18:	73 14       	cp	r7, r3
 d1a:	18 f4       	brcc	.+6      	; 0xd22 <vfprintf+0x2f0>
 d1c:	53 0c       	add	r5, r3
 d1e:	57 18       	sub	r5, r7
 d20:	73 2c       	mov	r7, r3
 d22:	73 14       	cp	r7, r3
 d24:	68 f4       	brcc	.+26     	; 0xd40 <vfprintf+0x30e>
 d26:	b7 01       	movw	r22, r14
 d28:	80 e2       	ldi	r24, 0x20	; 32
 d2a:	90 e0       	ldi	r25, 0x00	; 0
 d2c:	2c 87       	std	Y+12, r18	; 0x0c
 d2e:	0e 94 01 07 	call	0xe02	; 0xe02 <fputc>
 d32:	73 94       	inc	r7
 d34:	2c 85       	ldd	r18, Y+12	; 0x0c
 d36:	f5 cf       	rjmp	.-22     	; 0xd22 <vfprintf+0x2f0>
 d38:	73 14       	cp	r7, r3
 d3a:	10 f4       	brcc	.+4      	; 0xd40 <vfprintf+0x30e>
 d3c:	37 18       	sub	r3, r7
 d3e:	01 c0       	rjmp	.+2      	; 0xd42 <vfprintf+0x310>
 d40:	31 2c       	mov	r3, r1
 d42:	24 ff       	sbrs	r18, 4
 d44:	12 c0       	rjmp	.+36     	; 0xd6a <vfprintf+0x338>
 d46:	b7 01       	movw	r22, r14
 d48:	80 e3       	ldi	r24, 0x30	; 48
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	2c 87       	std	Y+12, r18	; 0x0c
 d4e:	0e 94 01 07 	call	0xe02	; 0xe02 <fputc>
 d52:	2c 85       	ldd	r18, Y+12	; 0x0c
 d54:	22 ff       	sbrs	r18, 2
 d56:	17 c0       	rjmp	.+46     	; 0xd86 <vfprintf+0x354>
 d58:	21 ff       	sbrs	r18, 1
 d5a:	03 c0       	rjmp	.+6      	; 0xd62 <vfprintf+0x330>
 d5c:	88 e5       	ldi	r24, 0x58	; 88
 d5e:	90 e0       	ldi	r25, 0x00	; 0
 d60:	02 c0       	rjmp	.+4      	; 0xd66 <vfprintf+0x334>
 d62:	88 e7       	ldi	r24, 0x78	; 120
 d64:	90 e0       	ldi	r25, 0x00	; 0
 d66:	b7 01       	movw	r22, r14
 d68:	0c c0       	rjmp	.+24     	; 0xd82 <vfprintf+0x350>
 d6a:	82 2f       	mov	r24, r18
 d6c:	86 78       	andi	r24, 0x86	; 134
 d6e:	59 f0       	breq	.+22     	; 0xd86 <vfprintf+0x354>
 d70:	21 fd       	sbrc	r18, 1
 d72:	02 c0       	rjmp	.+4      	; 0xd78 <vfprintf+0x346>
 d74:	80 e2       	ldi	r24, 0x20	; 32
 d76:	01 c0       	rjmp	.+2      	; 0xd7a <vfprintf+0x348>
 d78:	8b e2       	ldi	r24, 0x2B	; 43
 d7a:	27 fd       	sbrc	r18, 7
 d7c:	8d e2       	ldi	r24, 0x2D	; 45
 d7e:	b7 01       	movw	r22, r14
 d80:	90 e0       	ldi	r25, 0x00	; 0
 d82:	0e 94 01 07 	call	0xe02	; 0xe02 <fputc>
 d86:	a5 14       	cp	r10, r5
 d88:	38 f4       	brcc	.+14     	; 0xd98 <vfprintf+0x366>
 d8a:	b7 01       	movw	r22, r14
 d8c:	80 e3       	ldi	r24, 0x30	; 48
 d8e:	90 e0       	ldi	r25, 0x00	; 0
 d90:	0e 94 01 07 	call	0xe02	; 0xe02 <fputc>
 d94:	5a 94       	dec	r5
 d96:	f7 cf       	rjmp	.-18     	; 0xd86 <vfprintf+0x354>
 d98:	aa 94       	dec	r10
 d9a:	f4 01       	movw	r30, r8
 d9c:	ea 0d       	add	r30, r10
 d9e:	f1 1d       	adc	r31, r1
 da0:	80 81       	ld	r24, Z
 da2:	b7 01       	movw	r22, r14
 da4:	90 e0       	ldi	r25, 0x00	; 0
 da6:	0e 94 01 07 	call	0xe02	; 0xe02 <fputc>
 daa:	a1 10       	cpse	r10, r1
 dac:	f5 cf       	rjmp	.-22     	; 0xd98 <vfprintf+0x366>
 dae:	33 20       	and	r3, r3
 db0:	09 f4       	brne	.+2      	; 0xdb4 <vfprintf+0x382>
 db2:	51 ce       	rjmp	.-862    	; 0xa56 <vfprintf+0x24>
 db4:	b7 01       	movw	r22, r14
 db6:	80 e2       	ldi	r24, 0x20	; 32
 db8:	90 e0       	ldi	r25, 0x00	; 0
 dba:	0e 94 01 07 	call	0xe02	; 0xe02 <fputc>
 dbe:	3a 94       	dec	r3
 dc0:	f6 cf       	rjmp	.-20     	; 0xdae <vfprintf+0x37c>
 dc2:	f7 01       	movw	r30, r14
 dc4:	86 81       	ldd	r24, Z+6	; 0x06
 dc6:	97 81       	ldd	r25, Z+7	; 0x07
 dc8:	02 c0       	rjmp	.+4      	; 0xdce <vfprintf+0x39c>
 dca:	8f ef       	ldi	r24, 0xFF	; 255
 dcc:	9f ef       	ldi	r25, 0xFF	; 255
 dce:	2c 96       	adiw	r28, 0x0c	; 12
 dd0:	e2 e1       	ldi	r30, 0x12	; 18
 dd2:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__epilogue_restores__>

00000dd6 <strnlen_P>:
 dd6:	fc 01       	movw	r30, r24
 dd8:	05 90       	lpm	r0, Z+
 dda:	61 50       	subi	r22, 0x01	; 1
 ddc:	70 40       	sbci	r23, 0x00	; 0
 dde:	01 10       	cpse	r0, r1
 de0:	d8 f7       	brcc	.-10     	; 0xdd8 <strnlen_P+0x2>
 de2:	80 95       	com	r24
 de4:	90 95       	com	r25
 de6:	8e 0f       	add	r24, r30
 de8:	9f 1f       	adc	r25, r31
 dea:	08 95       	ret

00000dec <strnlen>:
 dec:	fc 01       	movw	r30, r24
 dee:	61 50       	subi	r22, 0x01	; 1
 df0:	70 40       	sbci	r23, 0x00	; 0
 df2:	01 90       	ld	r0, Z+
 df4:	01 10       	cpse	r0, r1
 df6:	d8 f7       	brcc	.-10     	; 0xdee <strnlen+0x2>
 df8:	80 95       	com	r24
 dfa:	90 95       	com	r25
 dfc:	8e 0f       	add	r24, r30
 dfe:	9f 1f       	adc	r25, r31
 e00:	08 95       	ret

00000e02 <fputc>:
 e02:	0f 93       	push	r16
 e04:	1f 93       	push	r17
 e06:	cf 93       	push	r28
 e08:	df 93       	push	r29
 e0a:	18 2f       	mov	r17, r24
 e0c:	09 2f       	mov	r16, r25
 e0e:	eb 01       	movw	r28, r22
 e10:	8b 81       	ldd	r24, Y+3	; 0x03
 e12:	81 fd       	sbrc	r24, 1
 e14:	03 c0       	rjmp	.+6      	; 0xe1c <fputc+0x1a>
 e16:	8f ef       	ldi	r24, 0xFF	; 255
 e18:	9f ef       	ldi	r25, 0xFF	; 255
 e1a:	20 c0       	rjmp	.+64     	; 0xe5c <fputc+0x5a>
 e1c:	82 ff       	sbrs	r24, 2
 e1e:	10 c0       	rjmp	.+32     	; 0xe40 <fputc+0x3e>
 e20:	4e 81       	ldd	r20, Y+6	; 0x06
 e22:	5f 81       	ldd	r21, Y+7	; 0x07
 e24:	2c 81       	ldd	r18, Y+4	; 0x04
 e26:	3d 81       	ldd	r19, Y+5	; 0x05
 e28:	42 17       	cp	r20, r18
 e2a:	53 07       	cpc	r21, r19
 e2c:	7c f4       	brge	.+30     	; 0xe4c <fputc+0x4a>
 e2e:	e8 81       	ld	r30, Y
 e30:	f9 81       	ldd	r31, Y+1	; 0x01
 e32:	9f 01       	movw	r18, r30
 e34:	2f 5f       	subi	r18, 0xFF	; 255
 e36:	3f 4f       	sbci	r19, 0xFF	; 255
 e38:	39 83       	std	Y+1, r19	; 0x01
 e3a:	28 83       	st	Y, r18
 e3c:	10 83       	st	Z, r17
 e3e:	06 c0       	rjmp	.+12     	; 0xe4c <fputc+0x4a>
 e40:	e8 85       	ldd	r30, Y+8	; 0x08
 e42:	f9 85       	ldd	r31, Y+9	; 0x09
 e44:	81 2f       	mov	r24, r17
 e46:	09 95       	icall
 e48:	89 2b       	or	r24, r25
 e4a:	29 f7       	brne	.-54     	; 0xe16 <fputc+0x14>
 e4c:	2e 81       	ldd	r18, Y+6	; 0x06
 e4e:	3f 81       	ldd	r19, Y+7	; 0x07
 e50:	2f 5f       	subi	r18, 0xFF	; 255
 e52:	3f 4f       	sbci	r19, 0xFF	; 255
 e54:	3f 83       	std	Y+7, r19	; 0x07
 e56:	2e 83       	std	Y+6, r18	; 0x06
 e58:	81 2f       	mov	r24, r17
 e5a:	90 2f       	mov	r25, r16
 e5c:	df 91       	pop	r29
 e5e:	cf 91       	pop	r28
 e60:	1f 91       	pop	r17
 e62:	0f 91       	pop	r16
 e64:	08 95       	ret

00000e66 <__ultoa_invert>:
 e66:	fa 01       	movw	r30, r20
 e68:	aa 27       	eor	r26, r26
 e6a:	28 30       	cpi	r18, 0x08	; 8
 e6c:	51 f1       	breq	.+84     	; 0xec2 <__ultoa_invert+0x5c>
 e6e:	20 31       	cpi	r18, 0x10	; 16
 e70:	81 f1       	breq	.+96     	; 0xed2 <__ultoa_invert+0x6c>
 e72:	e8 94       	clt
 e74:	6f 93       	push	r22
 e76:	6e 7f       	andi	r22, 0xFE	; 254
 e78:	6e 5f       	subi	r22, 0xFE	; 254
 e7a:	7f 4f       	sbci	r23, 0xFF	; 255
 e7c:	8f 4f       	sbci	r24, 0xFF	; 255
 e7e:	9f 4f       	sbci	r25, 0xFF	; 255
 e80:	af 4f       	sbci	r26, 0xFF	; 255
 e82:	b1 e0       	ldi	r27, 0x01	; 1
 e84:	3e d0       	rcall	.+124    	; 0xf02 <__ultoa_invert+0x9c>
 e86:	b4 e0       	ldi	r27, 0x04	; 4
 e88:	3c d0       	rcall	.+120    	; 0xf02 <__ultoa_invert+0x9c>
 e8a:	67 0f       	add	r22, r23
 e8c:	78 1f       	adc	r23, r24
 e8e:	89 1f       	adc	r24, r25
 e90:	9a 1f       	adc	r25, r26
 e92:	a1 1d       	adc	r26, r1
 e94:	68 0f       	add	r22, r24
 e96:	79 1f       	adc	r23, r25
 e98:	8a 1f       	adc	r24, r26
 e9a:	91 1d       	adc	r25, r1
 e9c:	a1 1d       	adc	r26, r1
 e9e:	6a 0f       	add	r22, r26
 ea0:	71 1d       	adc	r23, r1
 ea2:	81 1d       	adc	r24, r1
 ea4:	91 1d       	adc	r25, r1
 ea6:	a1 1d       	adc	r26, r1
 ea8:	20 d0       	rcall	.+64     	; 0xeea <__ultoa_invert+0x84>
 eaa:	09 f4       	brne	.+2      	; 0xeae <__ultoa_invert+0x48>
 eac:	68 94       	set
 eae:	3f 91       	pop	r19
 eb0:	2a e0       	ldi	r18, 0x0A	; 10
 eb2:	26 9f       	mul	r18, r22
 eb4:	11 24       	eor	r1, r1
 eb6:	30 19       	sub	r19, r0
 eb8:	30 5d       	subi	r19, 0xD0	; 208
 eba:	31 93       	st	Z+, r19
 ebc:	de f6       	brtc	.-74     	; 0xe74 <__ultoa_invert+0xe>
 ebe:	cf 01       	movw	r24, r30
 ec0:	08 95       	ret
 ec2:	46 2f       	mov	r20, r22
 ec4:	47 70       	andi	r20, 0x07	; 7
 ec6:	40 5d       	subi	r20, 0xD0	; 208
 ec8:	41 93       	st	Z+, r20
 eca:	b3 e0       	ldi	r27, 0x03	; 3
 ecc:	0f d0       	rcall	.+30     	; 0xeec <__ultoa_invert+0x86>
 ece:	c9 f7       	brne	.-14     	; 0xec2 <__ultoa_invert+0x5c>
 ed0:	f6 cf       	rjmp	.-20     	; 0xebe <__ultoa_invert+0x58>
 ed2:	46 2f       	mov	r20, r22
 ed4:	4f 70       	andi	r20, 0x0F	; 15
 ed6:	40 5d       	subi	r20, 0xD0	; 208
 ed8:	4a 33       	cpi	r20, 0x3A	; 58
 eda:	18 f0       	brcs	.+6      	; 0xee2 <__ultoa_invert+0x7c>
 edc:	49 5d       	subi	r20, 0xD9	; 217
 ede:	31 fd       	sbrc	r19, 1
 ee0:	40 52       	subi	r20, 0x20	; 32
 ee2:	41 93       	st	Z+, r20
 ee4:	02 d0       	rcall	.+4      	; 0xeea <__ultoa_invert+0x84>
 ee6:	a9 f7       	brne	.-22     	; 0xed2 <__ultoa_invert+0x6c>
 ee8:	ea cf       	rjmp	.-44     	; 0xebe <__ultoa_invert+0x58>
 eea:	b4 e0       	ldi	r27, 0x04	; 4
 eec:	a6 95       	lsr	r26
 eee:	97 95       	ror	r25
 ef0:	87 95       	ror	r24
 ef2:	77 95       	ror	r23
 ef4:	67 95       	ror	r22
 ef6:	ba 95       	dec	r27
 ef8:	c9 f7       	brne	.-14     	; 0xeec <__ultoa_invert+0x86>
 efa:	00 97       	sbiw	r24, 0x00	; 0
 efc:	61 05       	cpc	r22, r1
 efe:	71 05       	cpc	r23, r1
 f00:	08 95       	ret
 f02:	9b 01       	movw	r18, r22
 f04:	ac 01       	movw	r20, r24
 f06:	0a 2e       	mov	r0, r26
 f08:	06 94       	lsr	r0
 f0a:	57 95       	ror	r21
 f0c:	47 95       	ror	r20
 f0e:	37 95       	ror	r19
 f10:	27 95       	ror	r18
 f12:	ba 95       	dec	r27
 f14:	c9 f7       	brne	.-14     	; 0xf08 <__ultoa_invert+0xa2>
 f16:	62 0f       	add	r22, r18
 f18:	73 1f       	adc	r23, r19
 f1a:	84 1f       	adc	r24, r20
 f1c:	95 1f       	adc	r25, r21
 f1e:	a0 1d       	adc	r26, r0
 f20:	08 95       	ret

00000f22 <__prologue_saves__>:
 f22:	2f 92       	push	r2
 f24:	3f 92       	push	r3
 f26:	4f 92       	push	r4
 f28:	5f 92       	push	r5
 f2a:	6f 92       	push	r6
 f2c:	7f 92       	push	r7
 f2e:	8f 92       	push	r8
 f30:	9f 92       	push	r9
 f32:	af 92       	push	r10
 f34:	bf 92       	push	r11
 f36:	cf 92       	push	r12
 f38:	df 92       	push	r13
 f3a:	ef 92       	push	r14
 f3c:	ff 92       	push	r15
 f3e:	0f 93       	push	r16
 f40:	1f 93       	push	r17
 f42:	cf 93       	push	r28
 f44:	df 93       	push	r29
 f46:	cd b7       	in	r28, 0x3d	; 61
 f48:	de b7       	in	r29, 0x3e	; 62
 f4a:	ca 1b       	sub	r28, r26
 f4c:	db 0b       	sbc	r29, r27
 f4e:	0f b6       	in	r0, 0x3f	; 63
 f50:	f8 94       	cli
 f52:	de bf       	out	0x3e, r29	; 62
 f54:	0f be       	out	0x3f, r0	; 63
 f56:	cd bf       	out	0x3d, r28	; 61
 f58:	09 94       	ijmp

00000f5a <__epilogue_restores__>:
 f5a:	2a 88       	ldd	r2, Y+18	; 0x12
 f5c:	39 88       	ldd	r3, Y+17	; 0x11
 f5e:	48 88       	ldd	r4, Y+16	; 0x10
 f60:	5f 84       	ldd	r5, Y+15	; 0x0f
 f62:	6e 84       	ldd	r6, Y+14	; 0x0e
 f64:	7d 84       	ldd	r7, Y+13	; 0x0d
 f66:	8c 84       	ldd	r8, Y+12	; 0x0c
 f68:	9b 84       	ldd	r9, Y+11	; 0x0b
 f6a:	aa 84       	ldd	r10, Y+10	; 0x0a
 f6c:	b9 84       	ldd	r11, Y+9	; 0x09
 f6e:	c8 84       	ldd	r12, Y+8	; 0x08
 f70:	df 80       	ldd	r13, Y+7	; 0x07
 f72:	ee 80       	ldd	r14, Y+6	; 0x06
 f74:	fd 80       	ldd	r15, Y+5	; 0x05
 f76:	0c 81       	ldd	r16, Y+4	; 0x04
 f78:	1b 81       	ldd	r17, Y+3	; 0x03
 f7a:	aa 81       	ldd	r26, Y+2	; 0x02
 f7c:	b9 81       	ldd	r27, Y+1	; 0x01
 f7e:	ce 0f       	add	r28, r30
 f80:	d1 1d       	adc	r29, r1
 f82:	0f b6       	in	r0, 0x3f	; 63
 f84:	f8 94       	cli
 f86:	de bf       	out	0x3e, r29	; 62
 f88:	0f be       	out	0x3f, r0	; 63
 f8a:	cd bf       	out	0x3d, r28	; 61
 f8c:	ed 01       	movw	r28, r26
 f8e:	08 95       	ret

00000f90 <_exit>:
 f90:	f8 94       	cli

00000f92 <__stop_program>:
 f92:	ff cf       	rjmp	.-2      	; 0xf92 <__stop_program>
